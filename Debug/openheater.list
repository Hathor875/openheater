
openheater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005364  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005504  08005504  00006504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a8  080055a8  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080055a8  080055a8  000065a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055b0  080055b0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b0  080055b0  000065b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055b4  080055b4  000065b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080055b8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          000002a8  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000310  20000310  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108c6  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e1  00000000  00000000  0001795e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  00019f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bac  00000000  00000000  0001ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223a4  00000000  00000000  0001b9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138a1  00000000  00000000  0003dd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce0b2  00000000  00000000  00051631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f6e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000464c  00000000  00000000  0011f728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00123d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054ec 	.word	0x080054ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080054ec 	.word	0x080054ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	@ 0x28
 80005fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b35      	ldr	r3, [pc, #212]	@ (80006e4 <MX_GPIO_Init+0xec>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a34      	ldr	r2, [pc, #208]	@ (80006e4 <MX_GPIO_Init+0xec>)
 8000614:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b32      	ldr	r3, [pc, #200]	@ (80006e4 <MX_GPIO_Init+0xec>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000626:	4b2f      	ldr	r3, [pc, #188]	@ (80006e4 <MX_GPIO_Init+0xec>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a2e      	ldr	r2, [pc, #184]	@ (80006e4 <MX_GPIO_Init+0xec>)
 800062c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <MX_GPIO_Init+0xec>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b29      	ldr	r3, [pc, #164]	@ (80006e4 <MX_GPIO_Init+0xec>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a28      	ldr	r2, [pc, #160]	@ (80006e4 <MX_GPIO_Init+0xec>)
 8000644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b26      	ldr	r3, [pc, #152]	@ (80006e4 <MX_GPIO_Init+0xec>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <MX_GPIO_Init+0xec>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <MX_GPIO_Init+0xec>)
 800065c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <MX_GPIO_Init+0xec>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2120      	movs	r1, #32
 8000672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000676:	f000 fe6b 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_CS_MAX_1_GPIO_Port, _CS_MAX_1_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2102      	movs	r1, #2
 800067e:	481a      	ldr	r0, [pc, #104]	@ (80006e8 <MX_GPIO_Init+0xf0>)
 8000680:	f000 fe66 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000684:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800068a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4814      	ldr	r0, [pc, #80]	@ (80006ec <MX_GPIO_Init+0xf4>)
 800069c:	f000 fcce 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a0:	2320      	movs	r3, #32
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f000 fcbf 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : _CS_MAX_1_Pin */
  GPIO_InitStruct.Pin = _CS_MAX_1_Pin;
 80006be:	2302      	movs	r3, #2
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(_CS_MAX_1_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_GPIO_Init+0xf0>)
 80006d6:	f000 fcb1 	bl	800103c <HAL_GPIO_Init>

}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	@ 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400
 80006ec:	48000800 	.word	0x48000800

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f000 fb65 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f84b 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f7ff ff7b 	bl	80005f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000702:	f000 fac3 	bl	8000c8c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000706:	f000 f8bb 	bl	8000880 <MX_SPI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2102      	movs	r1, #2
 800070e:	481d      	ldr	r0, [pc, #116]	@ (8000784 <main+0x94>)
 8000710:	f000 fe1e 	bl	8001350 <HAL_GPIO_WritePin>

		      // Odczyt danych z MAX6675 (2 bajty)
		      uint8_t data[2] = {0, 0};
 8000714:	2300      	movs	r3, #0
 8000716:	80bb      	strh	r3, [r7, #4]
		      HAL_SPI_Receive(&hspi2, data, 2, 1000);
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800071e:	2202      	movs	r2, #2
 8000720:	4819      	ldr	r0, [pc, #100]	@ (8000788 <main+0x98>)
 8000722:	f002 fb9c 	bl	8002e5e <HAL_SPI_Receive>

		      // Sprawdzanie odczytanych danych
		      printf("Odczytane dane: 0x%02X 0x%02X\n", data[0], data[1]);
 8000726:	793b      	ldrb	r3, [r7, #4]
 8000728:	4619      	mov	r1, r3
 800072a:	797b      	ldrb	r3, [r7, #5]
 800072c:	461a      	mov	r2, r3
 800072e:	4817      	ldr	r0, [pc, #92]	@ (800078c <main+0x9c>)
 8000730:	f004 f86e 	bl	8004810 <iprintf>

		      // Zinterpretowanie danych
		      uint16_t temp_raw = (data[0] << 8) | data[1]; // Sklejenie dwóch bajtów
 8000734:	793b      	ldrb	r3, [r7, #4]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21a      	sxth	r2, r3
 800073a:	797b      	ldrb	r3, [r7, #5]
 800073c:	b21b      	sxth	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b21b      	sxth	r3, r3
 8000742:	81fb      	strh	r3, [r7, #14]
		      temp_raw = temp_raw >> 3; // Przesunięcie 3 bity, aby uzyskać temperaturę
 8000744:	89fb      	ldrh	r3, [r7, #14]
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	81fb      	strh	r3, [r7, #14]
		      float temperature = (float)temp_raw * 0.25;
 800074a:	89fb      	ldrh	r3, [r7, #14]
 800074c:	ee07 3a90 	vmov	s15, r3
 8000750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000754:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8000758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800075c:	edc7 7a02 	vstr	s15, [r7, #8]
		      // Wyświetlanie temperatury
		      printf("Temperatura: %d °C\n", temperature);
 8000760:	68b8      	ldr	r0, [r7, #8]
 8000762:	f7ff fef1 	bl	8000548 <__aeabi_f2d>
 8000766:	4602      	mov	r2, r0
 8000768:	460b      	mov	r3, r1
 800076a:	4809      	ldr	r0, [pc, #36]	@ (8000790 <main+0xa0>)
 800076c:	f004 f850 	bl	8004810 <iprintf>

		      // Ustawienie CS na wysoki stan (dezaktywacja czujnika)
		      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2102      	movs	r1, #2
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <main+0x94>)
 8000776:	f000 fdeb 	bl	8001350 <HAL_GPIO_WritePin>

		      // Opcjonalne opóźnienie
		      HAL_Delay(100);  //
 800077a:	2064      	movs	r0, #100	@ 0x64
 800077c:	f000 fb58 	bl	8000e30 <HAL_Delay>
  {
 8000780:	bf00      	nop
 8000782:	e7c2      	b.n	800070a <main+0x1a>
 8000784:	48000400 	.word	0x48000400
 8000788:	20000084 	.word	0x20000084
 800078c:	08005504 	.word	0x08005504
 8000790:	08005524 	.word	0x08005524

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0a6      	sub	sp, #152	@ 0x98
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800079e:	2228      	movs	r2, #40	@ 0x28
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 f889 	bl	80048ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2258      	movs	r2, #88	@ 0x58
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 f87b 	bl	80048ba <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007e0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fdc4 	bl	8001380 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007fe:	f000 f839 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2302      	movs	r3, #2
 8000808:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000812:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000818:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800081c:	2102      	movs	r1, #2
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fe02 	bl	8002428 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800082a:	f000 f823 	bl	8000874 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800082e:	2302      	movs	r3, #2
 8000830:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4618      	mov	r0, r3
 800083a:	f002 f847 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000844:	f000 f816 	bl	8000874 <Error_Handler>
  }
}
 8000848:	bf00      	nop
 800084a:	3798      	adds	r7, #152	@ 0x98
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d101      	bne.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000862:	f000 fac5 	bl	8000df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40012c00 	.word	0x40012c00

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_SPI2_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	@ (80008f8 <MX_SPI2_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_SPI2_Init+0x74>)
 800088c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_SPI2_Init+0x74>)
 8000894:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000898:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_SPI2_Init+0x74>)
 800089c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_SPI2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_SPI2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SPI2_Init+0x74>)
 80008b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_SPI2_Init+0x74>)
 80008b8:	2218      	movs	r2, #24
 80008ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <MX_SPI2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_SPI2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_SPI2_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_SPI2_Init+0x74>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_SPI2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_SPI2_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_SPI2_Init+0x74>)
 80008e2:	f002 fa11 	bl	8002d08 <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80008ec:	f7ff ffc2 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000084 	.word	0x20000084
 80008f8:	40003800 	.word	0x40003800

080008fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <HAL_SPI_MspInit+0x7c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d128      	bne.n	8000970 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800091e:	4b17      	ldr	r3, [pc, #92]	@ (800097c <HAL_SPI_MspInit+0x80>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a16      	ldr	r2, [pc, #88]	@ (800097c <HAL_SPI_MspInit+0x80>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <HAL_SPI_MspInit+0x80>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <HAL_SPI_MspInit+0x80>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a10      	ldr	r2, [pc, #64]	@ (800097c <HAL_SPI_MspInit+0x80>)
 800093c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000940:	6153      	str	r3, [r2, #20]
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <HAL_SPI_MspInit+0x80>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800094e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000960:	2305      	movs	r3, #5
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <HAL_SPI_MspInit+0x84>)
 800096c:	f000 fb66 	bl	800103c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40003800 	.word	0x40003800
 800097c:	40021000 	.word	0x40021000
 8000980:	48000400 	.word	0x48000400

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <HAL_MspInit+0x44>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <HAL_MspInit+0x44>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <HAL_MspInit+0x44>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <HAL_MspInit+0x44>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <HAL_MspInit+0x44>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_MspInit+0x44>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	@ 0x30
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000a98 <HAL_InitTick+0xcc>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000a98 <HAL_InitTick+0xcc>)
 80009e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a98 <HAL_InitTick+0xcc>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f4:	f107 020c 	add.w	r2, r7, #12
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 ff32 	bl	8002868 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a04:	f001 ff0e 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8000a08:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0c:	4a23      	ldr	r2, [pc, #140]	@ (8000a9c <HAL_InitTick+0xd0>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	0c9b      	lsrs	r3, r3, #18
 8000a14:	3b01      	subs	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <HAL_InitTick+0xd4>)
 8000a1a:	4a22      	ldr	r2, [pc, #136]	@ (8000aa4 <HAL_InitTick+0xd8>)
 8000a1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <HAL_InitTick+0xd4>)
 8000a20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a24:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a26:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa0 <HAL_InitTick+0xd4>)
 8000a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <HAL_InitTick+0xd4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <HAL_InitTick+0xd4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_InitTick+0xd4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a3e:	4818      	ldr	r0, [pc, #96]	@ (8000aa0 <HAL_InitTick+0xd4>)
 8000a40:	f002 ff22 	bl	8003888 <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d11b      	bne.n	8000a8a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a52:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <HAL_InitTick+0xd4>)
 8000a54:	f002 ff7a 	bl	800394c <HAL_TIM_Base_Start_IT>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d111      	bne.n	8000a8a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a66:	2019      	movs	r0, #25
 8000a68:	f000 fada 	bl	8001020 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	d808      	bhi.n	8000a84 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a72:	2200      	movs	r2, #0
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	2019      	movs	r0, #25
 8000a78:	f000 fab6 	bl	8000fe8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <HAL_InitTick+0xdc>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e002      	b.n	8000a8a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3730      	adds	r7, #48	@ 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	431bde83 	.word	0x431bde83
 8000aa0:	200000e8 	.word	0x200000e8
 8000aa4:	40012c00 	.word	0x40012c00
 8000aa8:	20000004 	.word	0x20000004

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b12:	f002 ff8b 	bl	8003a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000e8 	.word	0x200000e8

08000b20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b32:	f3af 8000 	nop.w
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
  }

  return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	e009      	b.n	8000b80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf1      	blt.n	8000b6c <_write+0x12>
  }
  return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_close>:

int _close(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bba:	605a      	str	r2, [r3, #4]
  return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_isatty>:

int _isatty(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f003 fe94 	bl	8004958 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20010000 	.word	0x20010000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	20000134 	.word	0x20000134
 8000c64:	20000310 	.word	0x20000310

08000c68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000c92:	4a15      	ldr	r2, [pc, #84]	@ (8000ce8 <MX_USART2_UART_Init+0x5c>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000c98:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cd0:	f003 f89e 	bl	8003e10 <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cda:	f7ff fdcb 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000138 	.word	0x20000138
 8000ce8:	40004400 	.word	0x40004400

08000cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a17      	ldr	r2, [pc, #92]	@ (8000d68 <HAL_UART_MspInit+0x7c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d128      	bne.n	8000d60 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <HAL_UART_MspInit+0x80>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a16      	ldr	r2, [pc, #88]	@ (8000d6c <HAL_UART_MspInit+0x80>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d18:	61d3      	str	r3, [r2, #28]
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <HAL_UART_MspInit+0x80>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <HAL_UART_MspInit+0x80>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	4a10      	ldr	r2, [pc, #64]	@ (8000d6c <HAL_UART_MspInit+0x80>)
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d30:	6153      	str	r3, [r2, #20]
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <HAL_UART_MspInit+0x80>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5c:	f000 f96e 	bl	800103c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40004400 	.word	0x40004400
 8000d6c:	40021000 	.word	0x40021000

08000d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d74:	f7ff ff78 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	@ (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f003 fde1 	bl	8004964 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da2:	f7ff fca5 	bl	80006f0 <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000db4:	080055b8 	.word	0x080055b8
  ldr r2, =_sbss
 8000db8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dbc:	20000310 	.word	0x20000310

08000dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_2_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_Init+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <HAL_Init+0x28>)
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f8fc 	bl	8000fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f7ff fdf6 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fdd0 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	200001c0 	.word	0x200001c0

08000e18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200001c0 	.word	0x200001c0

08000e30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	@ (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	@ (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	@ 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff4c 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffa:	f7ff ff61 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8000ffe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	68b9      	ldr	r1, [r7, #8]
 8001004:	6978      	ldr	r0, [r7, #20]
 8001006:	f7ff ffb1 	bl	8000f6c <NVIC_EncodePriority>
 800100a:	4602      	mov	r2, r0
 800100c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff80 	bl	8000f18 <__NVIC_SetPriority>
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff54 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	e160      	b.n	800130e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8152 	beq.w	8001308 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d005      	beq.n	800107c <HAL_GPIO_Init+0x40>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d130      	bne.n	80010de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b2:	2201      	movs	r2, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	f003 0201 	and.w	r2, r3, #1
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d017      	beq.n	800111a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	6939      	ldr	r1, [r7, #16]
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0203 	and.w	r2, r3, #3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80ac 	beq.w	8001308 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b5e      	ldr	r3, [pc, #376]	@ (800132c <HAL_GPIO_Init+0x2f0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a5d      	ldr	r2, [pc, #372]	@ (800132c <HAL_GPIO_Init+0x2f0>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b5b      	ldr	r3, [pc, #364]	@ (800132c <HAL_GPIO_Init+0x2f0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c8:	4a59      	ldr	r2, [pc, #356]	@ (8001330 <HAL_GPIO_Init+0x2f4>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011f2:	d025      	beq.n	8001240 <HAL_GPIO_Init+0x204>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4f      	ldr	r2, [pc, #316]	@ (8001334 <HAL_GPIO_Init+0x2f8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d01f      	beq.n	800123c <HAL_GPIO_Init+0x200>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001338 <HAL_GPIO_Init+0x2fc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d019      	beq.n	8001238 <HAL_GPIO_Init+0x1fc>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4d      	ldr	r2, [pc, #308]	@ (800133c <HAL_GPIO_Init+0x300>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d013      	beq.n	8001234 <HAL_GPIO_Init+0x1f8>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4c      	ldr	r2, [pc, #304]	@ (8001340 <HAL_GPIO_Init+0x304>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d00d      	beq.n	8001230 <HAL_GPIO_Init+0x1f4>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a4b      	ldr	r2, [pc, #300]	@ (8001344 <HAL_GPIO_Init+0x308>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d007      	beq.n	800122c <HAL_GPIO_Init+0x1f0>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a4a      	ldr	r2, [pc, #296]	@ (8001348 <HAL_GPIO_Init+0x30c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_GPIO_Init+0x1ec>
 8001224:	2306      	movs	r3, #6
 8001226:	e00c      	b.n	8001242 <HAL_GPIO_Init+0x206>
 8001228:	2307      	movs	r3, #7
 800122a:	e00a      	b.n	8001242 <HAL_GPIO_Init+0x206>
 800122c:	2305      	movs	r3, #5
 800122e:	e008      	b.n	8001242 <HAL_GPIO_Init+0x206>
 8001230:	2304      	movs	r3, #4
 8001232:	e006      	b.n	8001242 <HAL_GPIO_Init+0x206>
 8001234:	2303      	movs	r3, #3
 8001236:	e004      	b.n	8001242 <HAL_GPIO_Init+0x206>
 8001238:	2302      	movs	r3, #2
 800123a:	e002      	b.n	8001242 <HAL_GPIO_Init+0x206>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <HAL_GPIO_Init+0x206>
 8001240:	2300      	movs	r3, #0
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	f002 0203 	and.w	r2, r2, #3
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	4093      	lsls	r3, r2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001252:	4937      	ldr	r1, [pc, #220]	@ (8001330 <HAL_GPIO_Init+0x2f4>)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001260:	4b3a      	ldr	r3, [pc, #232]	@ (800134c <HAL_GPIO_Init+0x310>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001284:	4a31      	ldr	r2, [pc, #196]	@ (800134c <HAL_GPIO_Init+0x310>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800128a:	4b30      	ldr	r3, [pc, #192]	@ (800134c <HAL_GPIO_Init+0x310>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ae:	4a27      	ldr	r2, [pc, #156]	@ (800134c <HAL_GPIO_Init+0x310>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012b4:	4b25      	ldr	r3, [pc, #148]	@ (800134c <HAL_GPIO_Init+0x310>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012d8:	4a1c      	ldr	r2, [pc, #112]	@ (800134c <HAL_GPIO_Init+0x310>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012de:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <HAL_GPIO_Init+0x310>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <HAL_GPIO_Init+0x310>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	f47f ae97 	bne.w	800104c <HAL_GPIO_Init+0x10>
  }
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000
 8001334:	48000400 	.word	0x48000400
 8001338:	48000800 	.word	0x48000800
 800133c:	48000c00 	.word	0x48000c00
 8001340:	48001000 	.word	0x48001000
 8001344:	48001400 	.word	0x48001400
 8001348:	48001800 	.word	0x48001800
 800134c:	40010400 	.word	0x40010400

08001350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001360:	787b      	ldrb	r3, [r7, #1]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800136c:	e002      	b.n	8001374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001386:	af00      	add	r7, sp, #0
 8001388:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800138c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001390:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001392:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001396:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	f001 b83a 	b.w	800241a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 816f 	beq.w	800169a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013bc:	4bb5      	ldr	r3, [pc, #724]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 030c 	and.w	r3, r3, #12
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d00c      	beq.n	80013e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c8:	4bb2      	ldr	r3, [pc, #712]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d15c      	bne.n	800148e <HAL_RCC_OscConfig+0x10e>
 80013d4:	4baf      	ldr	r3, [pc, #700]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013e0:	d155      	bne.n	800148e <HAL_RCC_OscConfig+0x10e>
 80013e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013e6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fa:	fab3 f383 	clz	r3, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	095b      	lsrs	r3, r3, #5
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d102      	bne.n	8001414 <HAL_RCC_OscConfig+0x94>
 800140e:	4ba1      	ldr	r3, [pc, #644]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	e015      	b.n	8001440 <HAL_RCC_OscConfig+0xc0>
 8001414:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001418:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001428:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800142c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001430:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001434:	fa93 f3a3 	rbit	r3, r3
 8001438:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800143c:	4b95      	ldr	r3, [pc, #596]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 800143e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001440:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001444:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001448:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800144c:	fa92 f2a2 	rbit	r2, r2
 8001450:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001454:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001458:	fab2 f282 	clz	r2, r2
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	f042 0220 	orr.w	r2, r2, #32
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	f002 021f 	and.w	r2, r2, #31
 8001468:	2101      	movs	r1, #1
 800146a:	fa01 f202 	lsl.w	r2, r1, r2
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 8111 	beq.w	8001698 <HAL_RCC_OscConfig+0x318>
 8001476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f040 8108 	bne.w	8001698 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	f000 bfc6 	b.w	800241a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001492:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800149e:	d106      	bne.n	80014ae <HAL_RCC_OscConfig+0x12e>
 80014a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a7b      	ldr	r2, [pc, #492]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80014a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	e036      	b.n	800151c <HAL_RCC_OscConfig+0x19c>
 80014ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x158>
 80014be:	4b75      	ldr	r3, [pc, #468]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a74      	ldr	r2, [pc, #464]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b72      	ldr	r3, [pc, #456]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a71      	ldr	r2, [pc, #452]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e021      	b.n	800151c <HAL_RCC_OscConfig+0x19c>
 80014d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x184>
 80014ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a69      	ldr	r2, [pc, #420]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	4b67      	ldr	r3, [pc, #412]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a66      	ldr	r2, [pc, #408]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e00b      	b.n	800151c <HAL_RCC_OscConfig+0x19c>
 8001504:	4b63      	ldr	r3, [pc, #396]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a62      	ldr	r2, [pc, #392]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 800150a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b60      	ldr	r3, [pc, #384]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a5f      	ldr	r2, [pc, #380]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 8001516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800151a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800151c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001520:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d059      	beq.n	80015e0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fc74 	bl	8000e18 <HAL_GetTick>
 8001530:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001536:	f7ff fc6f 	bl	8000e18 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	@ 0x64
 8001544:	d902      	bls.n	800154c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	f000 bf67 	b.w	800241a <HAL_RCC_OscConfig+0x109a>
 800154c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001550:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001558:	fa93 f3a3 	rbit	r3, r3
 800155c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001560:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b01      	cmp	r3, #1
 8001576:	d102      	bne.n	800157e <HAL_RCC_OscConfig+0x1fe>
 8001578:	4b46      	ldr	r3, [pc, #280]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0x22a>
 800157e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001582:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001592:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001596:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800159a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80015a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 80015a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015ae:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80015b2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80015b6:	fa92 f2a2 	rbit	r2, r2
 80015ba:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80015be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80015c2:	fab2 f282 	clz	r2, r2
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	f042 0220 	orr.w	r2, r2, #32
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	f002 021f 	and.w	r2, r2, #31
 80015d2:	2101      	movs	r1, #1
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ab      	beq.n	8001536 <HAL_RCC_OscConfig+0x1b6>
 80015de:	e05c      	b.n	800169a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc1a 	bl	8000e18 <HAL_GetTick>
 80015e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e8:	e00a      	b.n	8001600 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ea:	f7ff fc15 	bl	8000e18 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	@ 0x64
 80015f8:	d902      	bls.n	8001600 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	f000 bf0d 	b.w	800241a <HAL_RCC_OscConfig+0x109a>
 8001600:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001604:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001614:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <HAL_RCC_OscConfig+0x2b2>
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	e015      	b.n	800165e <HAL_RCC_OscConfig+0x2de>
 8001632:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001636:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001646:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800164a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800164e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <HAL_RCC_OscConfig+0x314>)
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001662:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001666:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800166a:	fa92 f2a2 	rbit	r2, r2
 800166e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001672:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001676:	fab2 f282 	clz	r2, r2
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f042 0220 	orr.w	r2, r2, #32
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	f002 021f 	and.w	r2, r2, #31
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ab      	bne.n	80015ea <HAL_RCC_OscConfig+0x26a>
 8001692:	e002      	b.n	800169a <HAL_RCC_OscConfig+0x31a>
 8001694:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800169e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 817f 	beq.w	80019ae <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016b0:	4ba7      	ldr	r3, [pc, #668]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016bc:	4ba4      	ldr	r3, [pc, #656]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d173      	bne.n	80017b0 <HAL_RCC_OscConfig+0x430>
 80016c8:	4ba1      	ldr	r3, [pc, #644]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80016d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016d4:	d16c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x430>
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80016e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ec:	fab3 f383 	clz	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d102      	bne.n	8001706 <HAL_RCC_OscConfig+0x386>
 8001700:	4b93      	ldr	r3, [pc, #588]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	e013      	b.n	800172e <HAL_RCC_OscConfig+0x3ae>
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001718:	2302      	movs	r3, #2
 800171a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800171e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800172a:	4b89      	ldr	r3, [pc, #548]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172e:	2202      	movs	r2, #2
 8001730:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001734:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001738:	fa92 f2a2 	rbit	r2, r2
 800173c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001740:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001744:	fab2 f282 	clz	r2, r2
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	f042 0220 	orr.w	r2, r2, #32
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	f002 021f 	and.w	r2, r2, #31
 8001754:	2101      	movs	r1, #1
 8001756:	fa01 f202 	lsl.w	r2, r1, r2
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00a      	beq.n	8001776 <HAL_RCC_OscConfig+0x3f6>
 8001760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001764:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d002      	beq.n	8001776 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	f000 be52 	b.w	800241a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	4b76      	ldr	r3, [pc, #472]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800177e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001782:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	21f8      	movs	r1, #248	@ 0xf8
 800178c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001794:	fa91 f1a1 	rbit	r1, r1
 8001798:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800179c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80017a0:	fab1 f181 	clz	r1, r1
 80017a4:	b2c9      	uxtb	r1, r1
 80017a6:	408b      	lsls	r3, r1
 80017a8:	4969      	ldr	r1, [pc, #420]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	e0fe      	b.n	80019ae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 8088 	beq.w	80018d2 <HAL_RCC_OscConfig+0x552>
 80017c2:	2301      	movs	r3, #1
 80017c4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80017d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80017e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	461a      	mov	r2, r3
 80017ea:	2301      	movs	r3, #1
 80017ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fb13 	bl	8000e18 <HAL_GetTick>
 80017f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	e00a      	b.n	800180e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f8:	f7ff fb0e 	bl	8000e18 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d902      	bls.n	800180e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	f000 be06 	b.w	800241a <HAL_RCC_OscConfig+0x109a>
 800180e:	2302      	movs	r3, #2
 8001810:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001820:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	b2db      	uxtb	r3, r3
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d102      	bne.n	800183e <HAL_RCC_OscConfig+0x4be>
 8001838:	4b45      	ldr	r3, [pc, #276]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	e013      	b.n	8001866 <HAL_RCC_OscConfig+0x4e6>
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001850:	2302      	movs	r3, #2
 8001852:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001856:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001862:	4b3b      	ldr	r3, [pc, #236]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	2202      	movs	r2, #2
 8001868:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800186c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001870:	fa92 f2a2 	rbit	r2, r2
 8001874:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001878:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800187c:	fab2 f282 	clz	r2, r2
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	f042 0220 	orr.w	r2, r2, #32
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	f002 021f 	and.w	r2, r2, #31
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f202 	lsl.w	r2, r1, r2
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0af      	beq.n	80017f8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b2d      	ldr	r3, [pc, #180]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	21f8      	movs	r1, #248	@ 0xf8
 80018ae:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80018b6:	fa91 f1a1 	rbit	r1, r1
 80018ba:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80018be:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80018c2:	fab1 f181 	clz	r1, r1
 80018c6:	b2c9      	uxtb	r1, r1
 80018c8:	408b      	lsls	r3, r1
 80018ca:	4921      	ldr	r1, [pc, #132]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e06d      	b.n	80019ae <HAL_RCC_OscConfig+0x62e>
 80018d2:	2301      	movs	r3, #1
 80018d4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80018e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	461a      	mov	r2, r3
 80018fa:	2300      	movs	r3, #0
 80018fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fa8b 	bl	8000e18 <HAL_GetTick>
 8001902:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff fa86 	bl	8000e18 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d902      	bls.n	800191e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	f000 bd7e 	b.w	800241a <HAL_RCC_OscConfig+0x109a>
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001930:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_RCC_OscConfig+0x5d4>
 8001948:	4b01      	ldr	r3, [pc, #4]	@ (8001950 <HAL_RCC_OscConfig+0x5d0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	e016      	b.n	800197c <HAL_RCC_OscConfig+0x5fc>
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	2302      	movs	r3, #2
 8001956:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800196c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001978:	4bbf      	ldr	r3, [pc, #764]	@ (8001c78 <HAL_RCC_OscConfig+0x8f8>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	2202      	movs	r2, #2
 800197e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001982:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001986:	fa92 f2a2 	rbit	r2, r2
 800198a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800198e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001992:	fab2 f282 	clz	r2, r2
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	f042 0220 	orr.w	r2, r2, #32
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	f002 021f 	and.w	r2, r2, #31
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ac      	bne.n	8001908 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8113 	beq.w	8001bea <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d07c      	beq.n	8001ace <HAL_RCC_OscConfig+0x74e>
 80019d4:	2301      	movs	r3, #1
 80019d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80019de:	fa93 f3a3 	rbit	r3, r3
 80019e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80019e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	4ba2      	ldr	r3, [pc, #648]	@ (8001c7c <HAL_RCC_OscConfig+0x8fc>)
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	461a      	mov	r2, r3
 80019fa:	2301      	movs	r3, #1
 80019fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff fa0b 	bl	8000e18 <HAL_GetTick>
 8001a02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a08:	f7ff fa06 	bl	8000e18 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d902      	bls.n	8001a1e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	f000 bcfe 	b.w	800241a <HAL_RCC_OscConfig+0x109a>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a3e:	2202      	movs	r2, #2
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a62:	2202      	movs	r2, #2
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fa93 f2a3 	rbit	r2, r3
 8001a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7e:	4b7e      	ldr	r3, [pc, #504]	@ (8001c78 <HAL_RCC_OscConfig+0x8f8>)
 8001a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	6019      	str	r1, [r3, #0]
 8001a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f1a3 	rbit	r1, r3
 8001a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001aa4:	6019      	str	r1, [r3, #0]
  return result;
 8001aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aaa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d09d      	beq.n	8001a08 <HAL_RCC_OscConfig+0x688>
 8001acc:	e08d      	b.n	8001bea <HAL_RCC_OscConfig+0x86a>
 8001ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ade:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f2a3 	rbit	r2, r3
 8001ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001af0:	601a      	str	r2, [r3, #0]
  return result;
 8001af2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001afa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b5d      	ldr	r3, [pc, #372]	@ (8001c7c <HAL_RCC_OscConfig+0x8fc>)
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b10:	f7ff f982 	bl	8000e18 <HAL_GetTick>
 8001b14:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f97d 	bl	8000e18 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d902      	bls.n	8001b30 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	f000 bc75 	b.w	800241a <HAL_RCC_OscConfig+0x109a>
 8001b30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b38:	2202      	movs	r2, #2
 8001b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fa93 f2a3 	rbit	r2, r3
 8001b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b72:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b80:	2202      	movs	r2, #2
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b88:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fa93 f2a3 	rbit	r2, r3
 8001b92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001b9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9c:	4b36      	ldr	r3, [pc, #216]	@ (8001c78 <HAL_RCC_OscConfig+0x8f8>)
 8001b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ba0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ba8:	2102      	movs	r1, #2
 8001baa:	6019      	str	r1, [r3, #0]
 8001bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f1a3 	rbit	r1, r3
 8001bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bbe:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001bc2:	6019      	str	r1, [r3, #0]
  return result;
 8001bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d197      	bne.n	8001b1a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 81a5 	beq.w	8001f4a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c06:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <HAL_RCC_OscConfig+0x8f8>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d116      	bne.n	8001c40 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <HAL_RCC_OscConfig+0x8f8>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a18      	ldr	r2, [pc, #96]	@ (8001c78 <HAL_RCC_OscConfig+0x8f8>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <HAL_RCC_OscConfig+0x8f8>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c38:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <HAL_RCC_OscConfig+0x900>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d121      	bne.n	8001c90 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <HAL_RCC_OscConfig+0x900>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0b      	ldr	r2, [pc, #44]	@ (8001c80 <HAL_RCC_OscConfig+0x900>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c56:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c58:	f7ff f8de 	bl	8000e18 <HAL_GetTick>
 8001c5c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	e010      	b.n	8001c84 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7ff f8d9 	bl	8000e18 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	@ 0x64
 8001c70:	d908      	bls.n	8001c84 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e3d1      	b.n	800241a <HAL_RCC_OscConfig+0x109a>
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	10908120 	.word	0x10908120
 8001c80:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	4b8d      	ldr	r3, [pc, #564]	@ (8001ebc <HAL_RCC_OscConfig+0xb3c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0e8      	beq.n	8001c62 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x92e>
 8001ca0:	4b87      	ldr	r3, [pc, #540]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a86      	ldr	r2, [pc, #536]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	e035      	b.n	8001d1a <HAL_RCC_OscConfig+0x99a>
 8001cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x958>
 8001cbe:	4b80      	ldr	r3, [pc, #512]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a7f      	ldr	r2, [pc, #508]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b7d      	ldr	r3, [pc, #500]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a7c      	ldr	r2, [pc, #496]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	e020      	b.n	8001d1a <HAL_RCC_OscConfig+0x99a>
 8001cd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cdc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x982>
 8001ce8:	4b75      	ldr	r3, [pc, #468]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a74      	ldr	r2, [pc, #464]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	4b72      	ldr	r3, [pc, #456]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4a71      	ldr	r2, [pc, #452]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	e00b      	b.n	8001d1a <HAL_RCC_OscConfig+0x99a>
 8001d02:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a6b      	ldr	r2, [pc, #428]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8081 	beq.w	8001e2e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f874 	bl	8000e18 <HAL_GetTick>
 8001d30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	e00b      	b.n	8001d4e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7ff f86f 	bl	8000e18 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e365      	b.n	800241a <HAL_RCC_OscConfig+0x109a>
 8001d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d52:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d56:	2202      	movs	r2, #2
 8001d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d76:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d82:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d90:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d94:	601a      	str	r2, [r3, #0]
  return result;
 8001d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f043 0302 	orr.w	r3, r3, #2
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_OscConfig+0xa3a>
 8001db4:	4b42      	ldr	r3, [pc, #264]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	e013      	b.n	8001de2 <HAL_RCC_OscConfig+0xa62>
 8001dba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dbe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fa93 f2a3 	rbit	r2, r3
 8001dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	4b38      	ldr	r3, [pc, #224]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001de6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001dea:	2102      	movs	r1, #2
 8001dec:	6011      	str	r1, [r2, #0]
 8001dee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001df2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	fa92 f1a2 	rbit	r1, r2
 8001dfc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e00:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001e04:	6011      	str	r1, [r2, #0]
  return result;
 8001e06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e0a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	fab2 f282 	clz	r2, r2
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f002 021f 	and.w	r2, r2, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f202 	lsl.w	r2, r1, r2
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d084      	beq.n	8001d36 <HAL_RCC_OscConfig+0x9b6>
 8001e2c:	e083      	b.n	8001f36 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7fe fff3 	bl	8000e18 <HAL_GetTick>
 8001e32:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e38:	f7fe ffee 	bl	8000e18 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e2e4      	b.n	800241a <HAL_RCC_OscConfig+0x109a>
 8001e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e54:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e58:	2202      	movs	r2, #2
 8001e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e60:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	fa93 f2a3 	rbit	r2, r3
 8001e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e78:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e84:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	fa93 f2a3 	rbit	r2, r3
 8001e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e92:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e96:	601a      	str	r2, [r3, #0]
  return result;
 8001e98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e9c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ea0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xb44>
 8001eb6:	4b02      	ldr	r3, [pc, #8]	@ (8001ec0 <HAL_RCC_OscConfig+0xb40>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	e017      	b.n	8001eec <HAL_RCC_OscConfig+0xb6c>
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ecc:	2202      	movs	r2, #2
 8001ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4bb3      	ldr	r3, [pc, #716]	@ (80021b8 <HAL_RCC_OscConfig+0xe38>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ef0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	6011      	str	r1, [r2, #0]
 8001ef8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001efc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	fa92 f1a2 	rbit	r1, r2
 8001f06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f0a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001f0e:	6011      	str	r1, [r2, #0]
  return result;
 8001f10:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f14:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	fab2 f282 	clz	r2, r2
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f002 021f 	and.w	r2, r2, #31
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d180      	bne.n	8001e38 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f36:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d105      	bne.n	8001f4a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3e:	4b9e      	ldr	r3, [pc, #632]	@ (80021b8 <HAL_RCC_OscConfig+0xe38>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a9d      	ldr	r2, [pc, #628]	@ (80021b8 <HAL_RCC_OscConfig+0xe38>)
 8001f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 825e 	beq.w	8002418 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5c:	4b96      	ldr	r3, [pc, #600]	@ (80021b8 <HAL_RCC_OscConfig+0xe38>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	f000 821f 	beq.w	80023a8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	f040 8170 	bne.w	800225c <HAL_RCC_OscConfig+0xedc>
 8001f7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f80:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f8e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	fa93 f2a3 	rbit	r2, r3
 8001f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001fa0:	601a      	str	r2, [r3, #0]
  return result;
 8001fa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001faa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fb6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7fe ff29 	bl	8000e18 <HAL_GetTick>
 8001fc6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fca:	e009      	b.n	8001fe0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7fe ff24 	bl	8000e18 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e21c      	b.n	800241a <HAL_RCC_OscConfig+0x109a>
 8001fe0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001fe8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	fa93 f2a3 	rbit	r2, r3
 8001ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002000:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002004:	601a      	str	r2, [r3, #0]
  return result;
 8002006:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800200e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d102      	bne.n	800202a <HAL_RCC_OscConfig+0xcaa>
 8002024:	4b64      	ldr	r3, [pc, #400]	@ (80021b8 <HAL_RCC_OscConfig+0xe38>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	e027      	b.n	800207a <HAL_RCC_OscConfig+0xcfa>
 800202a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002032:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002054:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002058:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002062:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	fa93 f2a3 	rbit	r2, r3
 800206c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002070:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	4b50      	ldr	r3, [pc, #320]	@ (80021b8 <HAL_RCC_OscConfig+0xe38>)
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800207e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002082:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002086:	6011      	str	r1, [r2, #0]
 8002088:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800208c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	fa92 f1a2 	rbit	r1, r2
 8002096:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800209a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800209e:	6011      	str	r1, [r2, #0]
  return result;
 80020a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020a4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	fab2 f282 	clz	r2, r2
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f042 0220 	orr.w	r2, r2, #32
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	f002 021f 	and.w	r2, r2, #31
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d182      	bne.n	8001fcc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c6:	4b3c      	ldr	r3, [pc, #240]	@ (80021b8 <HAL_RCC_OscConfig+0xe38>)
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	f023 020f 	bic.w	r2, r3, #15
 80020ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	4937      	ldr	r1, [pc, #220]	@ (80021b8 <HAL_RCC_OscConfig+0xe38>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80020e0:	4b35      	ldr	r3, [pc, #212]	@ (80021b8 <HAL_RCC_OscConfig+0xe38>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80020e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6a19      	ldr	r1, [r3, #32]
 80020f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	430b      	orrs	r3, r1
 8002102:	492d      	ldr	r1, [pc, #180]	@ (80021b8 <HAL_RCC_OscConfig+0xe38>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
 8002108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002110:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	fa93 f2a3 	rbit	r2, r3
 8002124:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002128:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800212c:	601a      	str	r2, [r3, #0]
  return result;
 800212e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002132:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002136:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002142:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	461a      	mov	r2, r3
 800214a:	2301      	movs	r3, #1
 800214c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7fe fe63 	bl	8000e18 <HAL_GetTick>
 8002152:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002156:	e009      	b.n	800216c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe fe5e 	bl	8000e18 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e156      	b.n	800241a <HAL_RCC_OscConfig+0x109a>
 800216c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002170:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002174:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800217e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	fa93 f2a3 	rbit	r2, r3
 8002188:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002190:	601a      	str	r2, [r3, #0]
  return result;
 8002192:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002196:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800219a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0xe3c>
 80021b0:	4b01      	ldr	r3, [pc, #4]	@ (80021b8 <HAL_RCC_OscConfig+0xe38>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	e02a      	b.n	800220c <HAL_RCC_OscConfig+0xe8c>
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	fa93 f2a3 	rbit	r2, r3
 80021d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021dc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80021ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	fa93 f2a3 	rbit	r2, r3
 80021fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002202:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	4b86      	ldr	r3, [pc, #536]	@ (8002424 <HAL_RCC_OscConfig+0x10a4>)
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002210:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002214:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002218:	6011      	str	r1, [r2, #0]
 800221a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800221e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	fa92 f1a2 	rbit	r1, r2
 8002228:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800222c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002230:	6011      	str	r1, [r2, #0]
  return result;
 8002232:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002236:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	fab2 f282 	clz	r2, r2
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f042 0220 	orr.w	r2, r2, #32
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f002 021f 	and.w	r2, r2, #31
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	f43f af7f 	beq.w	8002158 <HAL_RCC_OscConfig+0xdd8>
 800225a:	e0dd      	b.n	8002418 <HAL_RCC_OscConfig+0x1098>
 800225c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002260:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002264:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800226e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f2a3 	rbit	r2, r3
 8002278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002280:	601a      	str	r2, [r3, #0]
  return result;
 8002282:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002286:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800228a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002296:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	461a      	mov	r2, r3
 800229e:	2300      	movs	r3, #0
 80022a0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a2:	f7fe fdb9 	bl	8000e18 <HAL_GetTick>
 80022a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022aa:	e009      	b.n	80022c0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe fdb4 	bl	8000e18 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0ac      	b.n	800241a <HAL_RCC_OscConfig+0x109a>
 80022c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80022c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f2a3 	rbit	r2, r3
 80022dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80022e4:	601a      	str	r2, [r3, #0]
  return result;
 80022e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ea:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80022ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d102      	bne.n	800230a <HAL_RCC_OscConfig+0xf8a>
 8002304:	4b47      	ldr	r3, [pc, #284]	@ (8002424 <HAL_RCC_OscConfig+0x10a4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	e027      	b.n	800235a <HAL_RCC_OscConfig+0xfda>
 800230a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002312:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fa93 f2a3 	rbit	r2, r3
 8002326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002334:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002338:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002342:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	fa93 f2a3 	rbit	r2, r3
 800234c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002350:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	4b33      	ldr	r3, [pc, #204]	@ (8002424 <HAL_RCC_OscConfig+0x10a4>)
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800235e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002362:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002366:	6011      	str	r1, [r2, #0]
 8002368:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800236c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	fa92 f1a2 	rbit	r1, r2
 8002376:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800237a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800237e:	6011      	str	r1, [r2, #0]
  return result;
 8002380:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002384:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	fab2 f282 	clz	r2, r2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f042 0220 	orr.w	r2, r2, #32
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f002 021f 	and.w	r2, r2, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d182      	bne.n	80022ac <HAL_RCC_OscConfig+0xf2c>
 80023a6:	e037      	b.n	8002418 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e02e      	b.n	800241a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023bc:	4b19      	ldr	r3, [pc, #100]	@ (8002424 <HAL_RCC_OscConfig+0x10a4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80023c4:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <HAL_RCC_OscConfig+0x10a4>)
 80023c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80023d0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80023d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d117      	bne.n	8002414 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80023e8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d10b      	bne.n	8002414 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80023fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002400:	f003 020f 	and.w	r2, r3, #15
 8002404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002408:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000

08002428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b09e      	sub	sp, #120	@ 0x78
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e162      	b.n	8002706 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b90      	ldr	r3, [pc, #576]	@ (8002684 <HAL_RCC_ClockConfig+0x25c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d910      	bls.n	8002470 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b8d      	ldr	r3, [pc, #564]	@ (8002684 <HAL_RCC_ClockConfig+0x25c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	498b      	ldr	r1, [pc, #556]	@ (8002684 <HAL_RCC_ClockConfig+0x25c>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b89      	ldr	r3, [pc, #548]	@ (8002684 <HAL_RCC_ClockConfig+0x25c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e14a      	b.n	8002706 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247c:	4b82      	ldr	r3, [pc, #520]	@ (8002688 <HAL_RCC_ClockConfig+0x260>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	497f      	ldr	r1, [pc, #508]	@ (8002688 <HAL_RCC_ClockConfig+0x260>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80dc 	beq.w	8002654 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d13c      	bne.n	800251e <HAL_RCC_ClockConfig+0xf6>
 80024a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80024b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_ClockConfig+0xa6>
 80024c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002688 <HAL_RCC_ClockConfig+0x260>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	e00f      	b.n	80024ee <HAL_RCC_ClockConfig+0xc6>
 80024ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	667b      	str	r3, [r7, #100]	@ 0x64
 80024dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80024e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024ea:	4b67      	ldr	r3, [pc, #412]	@ (8002688 <HAL_RCC_ClockConfig+0x260>)
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024f6:	fa92 f2a2 	rbit	r2, r2
 80024fa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80024fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80024fe:	fab2 f282 	clz	r2, r2
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f042 0220 	orr.w	r2, r2, #32
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f002 021f 	and.w	r2, r2, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d17b      	bne.n	8002612 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e0f3      	b.n	8002706 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d13c      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x178>
 8002526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800252a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d102      	bne.n	8002550 <HAL_RCC_ClockConfig+0x128>
 800254a:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <HAL_RCC_ClockConfig+0x260>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	e00f      	b.n	8002570 <HAL_RCC_ClockConfig+0x148>
 8002550:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002554:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	647b      	str	r3, [r7, #68]	@ 0x44
 800255e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002562:	643b      	str	r3, [r7, #64]	@ 0x40
 8002564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800256c:	4b46      	ldr	r3, [pc, #280]	@ (8002688 <HAL_RCC_ClockConfig+0x260>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002574:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002576:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002578:	fa92 f2a2 	rbit	r2, r2
 800257c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800257e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002580:	fab2 f282 	clz	r2, r2
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f042 0220 	orr.w	r2, r2, #32
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f002 021f 	and.w	r2, r2, #31
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f202 	lsl.w	r2, r1, r2
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d13a      	bne.n	8002612 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0b2      	b.n	8002706 <HAL_RCC_ClockConfig+0x2de>
 80025a0:	2302      	movs	r3, #2
 80025a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80025ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d102      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x1a0>
 80025c2:	4b31      	ldr	r3, [pc, #196]	@ (8002688 <HAL_RCC_ClockConfig+0x260>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	e00d      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1bc>
 80025c8:	2302      	movs	r3, #2
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d4:	2302      	movs	r3, #2
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	4b29      	ldr	r3, [pc, #164]	@ (8002688 <HAL_RCC_ClockConfig+0x260>)
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	2202      	movs	r2, #2
 80025e6:	61ba      	str	r2, [r7, #24]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	fa92 f2a2 	rbit	r2, r2
 80025ee:	617a      	str	r2, [r7, #20]
  return result;
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	fab2 f282 	clz	r2, r2
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	f042 0220 	orr.w	r2, r2, #32
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f002 021f 	and.w	r2, r2, #31
 8002602:	2101      	movs	r1, #1
 8002604:	fa01 f202 	lsl.w	r2, r1, r2
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e079      	b.n	8002706 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002612:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <HAL_RCC_ClockConfig+0x260>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f023 0203 	bic.w	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	491a      	ldr	r1, [pc, #104]	@ (8002688 <HAL_RCC_ClockConfig+0x260>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002624:	f7fe fbf8 	bl	8000e18 <HAL_GetTick>
 8002628:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	e00a      	b.n	8002642 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262c:	f7fe fbf4 	bl	8000e18 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e061      	b.n	8002706 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <HAL_RCC_ClockConfig+0x260>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 020c 	and.w	r2, r3, #12
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	429a      	cmp	r2, r3
 8002652:	d1eb      	bne.n	800262c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <HAL_RCC_ClockConfig+0x25c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d214      	bcs.n	800268c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <HAL_RCC_ClockConfig+0x25c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 0207 	bic.w	r2, r3, #7
 800266a:	4906      	ldr	r1, [pc, #24]	@ (8002684 <HAL_RCC_ClockConfig+0x25c>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <HAL_RCC_ClockConfig+0x25c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e040      	b.n	8002706 <HAL_RCC_ClockConfig+0x2de>
 8002684:	40022000 	.word	0x40022000
 8002688:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002698:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <HAL_RCC_ClockConfig+0x2e8>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	491a      	ldr	r1, [pc, #104]	@ (8002710 <HAL_RCC_ClockConfig+0x2e8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b6:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <HAL_RCC_ClockConfig+0x2e8>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4912      	ldr	r1, [pc, #72]	@ (8002710 <HAL_RCC_ClockConfig+0x2e8>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026ca:	f000 f829 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80026ce:	4601      	mov	r1, r0
 80026d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <HAL_RCC_ClockConfig+0x2e8>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026d8:	22f0      	movs	r2, #240	@ 0xf0
 80026da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	fa92 f2a2 	rbit	r2, r2
 80026e2:	60fa      	str	r2, [r7, #12]
  return result;
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	fab2 f282 	clz	r2, r2
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	40d3      	lsrs	r3, r2
 80026ee:	4a09      	ldr	r2, [pc, #36]	@ (8002714 <HAL_RCC_ClockConfig+0x2ec>)
 80026f0:	5cd3      	ldrb	r3, [r2, r3]
 80026f2:	fa21 f303 	lsr.w	r3, r1, r3
 80026f6:	4a08      	ldr	r2, [pc, #32]	@ (8002718 <HAL_RCC_ClockConfig+0x2f0>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026fa:	4b08      	ldr	r3, [pc, #32]	@ (800271c <HAL_RCC_ClockConfig+0x2f4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe f964 	bl	80009cc <HAL_InitTick>
  
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3778      	adds	r7, #120	@ 0x78
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	0800553c 	.word	0x0800553c
 8002718:	20000000 	.word	0x20000000
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800273a:	4b1f      	ldr	r3, [pc, #124]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x98>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b04      	cmp	r3, #4
 8002748:	d002      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x30>
 800274a:	2b08      	cmp	r3, #8
 800274c:	d003      	beq.n	8002756 <HAL_RCC_GetSysClockFreq+0x36>
 800274e:	e029      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002750:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002752:	613b      	str	r3, [r7, #16]
      break;
 8002754:	e029      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	0c9b      	lsrs	r3, r3, #18
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	4a18      	ldr	r2, [pc, #96]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002760:	5cd3      	ldrb	r3, [r2, r3]
 8002762:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002764:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	4a15      	ldr	r2, [pc, #84]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800277c:	4a0f      	ldr	r2, [pc, #60]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x9c>)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	fbb2 f2f3 	udiv	r2, r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e007      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800278e:	4a0b      	ldr	r2, [pc, #44]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	fbb2 f2f3 	udiv	r2, r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	613b      	str	r3, [r7, #16]
      break;
 80027a2:	e002      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x9c>)
 80027a6:	613b      	str	r3, [r7, #16]
      break;
 80027a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027aa:	693b      	ldr	r3, [r7, #16]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40021000 	.word	0x40021000
 80027bc:	007a1200 	.word	0x007a1200
 80027c0:	08005554 	.word	0x08005554
 80027c4:	08005564 	.word	0x08005564

080027c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027cc:	4b03      	ldr	r3, [pc, #12]	@ (80027dc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000

080027e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027e6:	f7ff ffef 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027ea:	4601      	mov	r1, r0
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027f4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80027f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	fa92 f2a2 	rbit	r2, r2
 8002800:	603a      	str	r2, [r7, #0]
  return result;
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	fab2 f282 	clz	r2, r2
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	40d3      	lsrs	r3, r2
 800280c:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <HAL_RCC_GetPCLK1Freq+0x40>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	0800554c 	.word	0x0800554c

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800282a:	f7ff ffcd 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 800282e:	4601      	mov	r1, r0
 8002830:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002838:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800283c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	fa92 f2a2 	rbit	r2, r2
 8002844:	603a      	str	r2, [r7, #0]
  return result;
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	40d3      	lsrs	r3, r2
 8002850:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	0800554c 	.word	0x0800554c

08002868 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	220f      	movs	r2, #15
 8002876:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800289c:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <HAL_RCC_GetClockConfig+0x60>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0207 	and.w	r2, r3, #7
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	601a      	str	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40022000 	.word	0x40022000

080028cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b092      	sub	sp, #72	@ 0x48
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80d4 	beq.w	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f0:	4b4e      	ldr	r3, [pc, #312]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10e      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fc:	4b4b      	ldr	r3, [pc, #300]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	4a4a      	ldr	r2, [pc, #296]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002906:	61d3      	str	r3, [r2, #28]
 8002908:	4b48      	ldr	r3, [pc, #288]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002914:	2301      	movs	r3, #1
 8002916:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b45      	ldr	r3, [pc, #276]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002926:	4b42      	ldr	r3, [pc, #264]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a41      	ldr	r2, [pc, #260]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002930:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7fe fa71 	bl	8000e18 <HAL_GetTick>
 8002936:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7fe fa6d 	bl	8000e18 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	@ 0x64
 8002946:	d901      	bls.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1d6      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4b38      	ldr	r3, [pc, #224]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002958:	4b34      	ldr	r3, [pc, #208]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002960:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8084 	beq.w	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002972:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002974:	429a      	cmp	r2, r3
 8002976:	d07c      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002978:	4b2c      	ldr	r3, [pc, #176]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002982:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002986:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	461a      	mov	r2, r3
 80029a2:	2301      	movs	r3, #1
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80029b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	4b1d      	ldr	r3, [pc, #116]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	461a      	mov	r2, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029ca:	4a18      	ldr	r2, [pc, #96]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d04b      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7fe fa1d 	bl	8000e18 <HAL_GetTick>
 80029de:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fa19 	bl	8000e18 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e180      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80029f8:	2302      	movs	r3, #2
 80029fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a04:	2302      	movs	r3, #2
 8002a06:	623b      	str	r3, [r7, #32]
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	61fb      	str	r3, [r7, #28]
  return result;
 8002a10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d108      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a26:	4b01      	ldr	r3, [pc, #4]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	e00d      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40007000 	.word	0x40007000
 8002a34:	10908100 	.word	0x10908100
 8002a38:	2302      	movs	r3, #2
 8002a3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	4b9a      	ldr	r3, [pc, #616]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	2202      	movs	r2, #2
 8002a4a:	613a      	str	r2, [r7, #16]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	fa92 f2a2 	rbit	r2, r2
 8002a52:	60fa      	str	r2, [r7, #12]
  return result;
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	fab2 f282 	clz	r2, r2
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f002 021f 	and.w	r2, r2, #31
 8002a66:	2101      	movs	r1, #1
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0b7      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a72:	4b8f      	ldr	r3, [pc, #572]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	498c      	ldr	r1, [pc, #560]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8c:	4b88      	ldr	r3, [pc, #544]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4a87      	ldr	r2, [pc, #540]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa4:	4b82      	ldr	r3, [pc, #520]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa8:	f023 0203 	bic.w	r2, r3, #3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	497f      	ldr	r1, [pc, #508]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4978      	ldr	r1, [pc, #480]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	4970      	ldr	r1, [pc, #448]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002afe:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f023 0210 	bic.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4969      	ldr	r1, [pc, #420]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b1c:	4b64      	ldr	r3, [pc, #400]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b28:	4961      	ldr	r1, [pc, #388]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	f023 0220 	bic.w	r2, r3, #32
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	495a      	ldr	r1, [pc, #360]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b58:	4b55      	ldr	r3, [pc, #340]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	4952      	ldr	r1, [pc, #328]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b76:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	494b      	ldr	r1, [pc, #300]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b94:	4b46      	ldr	r3, [pc, #280]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	4943      	ldr	r1, [pc, #268]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	493c      	ldr	r1, [pc, #240]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bd0:	4b37      	ldr	r3, [pc, #220]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bdc:	4934      	ldr	r1, [pc, #208]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002bee:	4b30      	ldr	r3, [pc, #192]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	492d      	ldr	r1, [pc, #180]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c0c:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c18:	4925      	ldr	r1, [pc, #148]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c2a:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	491e      	ldr	r1, [pc, #120]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002c48:	4b19      	ldr	r3, [pc, #100]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c54:	4916      	ldr	r1, [pc, #88]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002c66:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c72:	490f      	ldr	r1, [pc, #60]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c90:	4907      	ldr	r1, [pc, #28]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002ca2:	4b03      	ldr	r3, [pc, #12]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	e002      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb6:	4913      	ldr	r1, [pc, #76]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd4:	490b      	ldr	r1, [pc, #44]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002ce6:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf2:	4904      	ldr	r1, [pc, #16]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3748      	adds	r7, #72	@ 0x48
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000

08002d08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e09d      	b.n	8002e56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d108      	bne.n	8002d34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d2a:	d009      	beq.n	8002d40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	61da      	str	r2, [r3, #28]
 8002d32:	e005      	b.n	8002d40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fd fdce 	bl	80008fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d80:	d902      	bls.n	8002d88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e002      	b.n	8002d8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002d96:	d007      	beq.n	8002da8 <HAL_SPI_Init+0xa0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002da0:	d002      	beq.n	8002da8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dea:	ea42 0103 	orr.w	r1, r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	0c1b      	lsrs	r3, r3, #16
 8002e04:	f003 0204 	and.w	r2, r3, #4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e24:	ea42 0103 	orr.w	r1, r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b088      	sub	sp, #32
 8002e62:	af02      	add	r7, sp, #8
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d002      	beq.n	8002e84 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e82:	e11a      	b.n	80030ba <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e8c:	d112      	bne.n	8002eb4 <HAL_SPI_Receive+0x56>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10e      	bne.n	8002eb4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f90e 	bl	80030cc <HAL_SPI_TransmitReceive>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	e107      	b.n	80030c4 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_SPI_Receive+0x64>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e100      	b.n	80030c4 <HAL_SPI_Receive+0x266>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eca:	f7fd ffa5 	bl	8000e18 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_SPI_Receive+0x7e>
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ee0:	e0eb      	b.n	80030ba <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	88fa      	ldrh	r2, [r7, #6]
 8002efa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	88fa      	ldrh	r2, [r7, #6]
 8002f02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f2c:	d908      	bls.n	8002f40 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	e007      	b.n	8002f50 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f4e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f58:	d10f      	bne.n	8002f7a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f84:	2b40      	cmp	r3, #64	@ 0x40
 8002f86:	d007      	beq.n	8002f98 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fa0:	d86f      	bhi.n	8003082 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fa2:	e034      	b.n	800300e <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d117      	bne.n	8002fe2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f103 020c 	add.w	r2, r3, #12
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	7812      	ldrb	r2, [r2, #0]
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002fe0:	e015      	b.n	800300e <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe2:	f7fd ff19 	bl	8000e18 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d803      	bhi.n	8002ffa <HAL_SPI_Receive+0x19c>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ff8:	d102      	bne.n	8003000 <HAL_SPI_Receive+0x1a2>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800300c:	e055      	b.n	80030ba <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1c4      	bne.n	8002fa4 <HAL_SPI_Receive+0x146>
 800301a:	e038      	b.n	800308e <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d115      	bne.n	8003056 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	b292      	uxth	r2, r2
 8003036:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	1c9a      	adds	r2, r3, #2
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003054:	e015      	b.n	8003082 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003056:	f7fd fedf 	bl	8000e18 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d803      	bhi.n	800306e <HAL_SPI_Receive+0x210>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800306c:	d102      	bne.n	8003074 <HAL_SPI_Receive+0x216>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003080:	e01b      	b.n	80030ba <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1c6      	bne.n	800301c <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	6839      	ldr	r1, [r7, #0]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fb5a 	bl	800374c <SPI_EndRxTransaction>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	75fb      	strb	r3, [r7, #23]
 80030b0:	e003      	b.n	80030ba <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	@ 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030da:	2301      	movs	r3, #1
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_SPI_TransmitReceive+0x26>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e20a      	b.n	8003508 <HAL_SPI_TransmitReceive+0x43c>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030fa:	f7fd fe8d 	bl	8000e18 <HAL_GetTick>
 80030fe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003106:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800310e:	887b      	ldrh	r3, [r7, #2]
 8003110:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003112:	887b      	ldrh	r3, [r7, #2]
 8003114:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003116:	7efb      	ldrb	r3, [r7, #27]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d00e      	beq.n	800313a <HAL_SPI_TransmitReceive+0x6e>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003122:	d106      	bne.n	8003132 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <HAL_SPI_TransmitReceive+0x66>
 800312c:	7efb      	ldrb	r3, [r7, #27]
 800312e:	2b04      	cmp	r3, #4
 8003130:	d003      	beq.n	800313a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003132:	2302      	movs	r3, #2
 8003134:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003138:	e1e0      	b.n	80034fc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_SPI_TransmitReceive+0x80>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_SPI_TransmitReceive+0x80>
 8003146:	887b      	ldrh	r3, [r7, #2]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003152:	e1d3      	b.n	80034fc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b04      	cmp	r3, #4
 800315e:	d003      	beq.n	8003168 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2205      	movs	r2, #5
 8003164:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	887a      	ldrh	r2, [r7, #2]
 800318e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031aa:	d802      	bhi.n	80031b2 <HAL_SPI_TransmitReceive+0xe6>
 80031ac:	8a3b      	ldrh	r3, [r7, #16]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d908      	bls.n	80031c4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	e007      	b.n	80031d4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031de:	2b40      	cmp	r3, #64	@ 0x40
 80031e0:	d007      	beq.n	80031f2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031fa:	f240 8081 	bls.w	8003300 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_SPI_TransmitReceive+0x140>
 8003206:	8a7b      	ldrh	r3, [r7, #18]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d16d      	bne.n	80032e8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003210:	881a      	ldrh	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	1c9a      	adds	r2, r3, #2
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003230:	e05a      	b.n	80032e8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b02      	cmp	r3, #2
 800323e:	d11b      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x1ac>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x1ac>
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	2b01      	cmp	r3, #1
 800324e:	d113      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	881a      	ldrh	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003260:	1c9a      	adds	r2, r3, #2
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d11c      	bne.n	80032c0 <HAL_SPI_TransmitReceive+0x1f4>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	b292      	uxth	r2, r2
 800329e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	1c9a      	adds	r2, r3, #2
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032bc:	2301      	movs	r3, #1
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032c0:	f7fd fdaa 	bl	8000e18 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d80b      	bhi.n	80032e8 <HAL_SPI_TransmitReceive+0x21c>
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032d6:	d007      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80032e6:	e109      	b.n	80034fc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d19f      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x166>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d199      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x166>
 80032fe:	e0e3      	b.n	80034c8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_SPI_TransmitReceive+0x244>
 8003308:	8a7b      	ldrh	r3, [r7, #18]
 800330a:	2b01      	cmp	r3, #1
 800330c:	f040 80cf 	bne.w	80034ae <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d912      	bls.n	8003340 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331e:	881a      	ldrh	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332a:	1c9a      	adds	r2, r3, #2
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b02      	subs	r3, #2
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800333e:	e0b6      	b.n	80034ae <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	330c      	adds	r3, #12
 800334a:	7812      	ldrb	r2, [r2, #0]
 800334c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003366:	e0a2      	b.n	80034ae <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d134      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x314>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d02f      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x314>
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003382:	2b01      	cmp	r3, #1
 8003384:	d12c      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d912      	bls.n	80033b6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003394:	881a      	ldrh	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a0:	1c9a      	adds	r2, r3, #2
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b02      	subs	r3, #2
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033b4:	e012      	b.n	80033dc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	7812      	ldrb	r2, [r2, #0]
 80033c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d148      	bne.n	8003480 <HAL_SPI_TransmitReceive+0x3b4>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d042      	beq.n	8003480 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d923      	bls.n	800344e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	b292      	uxth	r2, r2
 8003412:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	1c9a      	adds	r2, r3, #2
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b02      	subs	r3, #2
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d81f      	bhi.n	800347c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	e016      	b.n	800347c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f103 020c 	add.w	r2, r3, #12
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	7812      	ldrb	r2, [r2, #0]
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800347c:	2301      	movs	r3, #1
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003480:	f7fd fcca 	bl	8000e18 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800348c:	429a      	cmp	r2, r3
 800348e:	d803      	bhi.n	8003498 <HAL_SPI_TransmitReceive+0x3cc>
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003496:	d102      	bne.n	800349e <HAL_SPI_TransmitReceive+0x3d2>
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	2b00      	cmp	r3, #0
 800349c:	d107      	bne.n	80034ae <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80034ac:	e026      	b.n	80034fc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f47f af57 	bne.w	8003368 <HAL_SPI_TransmitReceive+0x29c>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f47f af50 	bne.w	8003368 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f995 	bl	80037fc <SPI_EndRxTxTransaction>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034f2:	e003      	b.n	80034fc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003504:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003508:	4618      	mov	r0, r3
 800350a:	3728      	adds	r7, #40	@ 0x28
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003520:	f7fd fc7a 	bl	8000e18 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4413      	add	r3, r2
 800352e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003530:	f7fd fc72 	bl	8000e18 <HAL_GetTick>
 8003534:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003536:	4b39      	ldr	r3, [pc, #228]	@ (800361c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	015b      	lsls	r3, r3, #5
 800353c:	0d1b      	lsrs	r3, r3, #20
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	fb02 f303 	mul.w	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003546:	e054      	b.n	80035f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800354e:	d050      	beq.n	80035f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003550:	f7fd fc62 	bl	8000e18 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	429a      	cmp	r2, r3
 800355e:	d902      	bls.n	8003566 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d13d      	bne.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003574:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800357e:	d111      	bne.n	80035a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003588:	d004      	beq.n	8003594 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003592:	d107      	bne.n	80035a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ac:	d10f      	bne.n	80035ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e017      	b.n	8003612 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d19b      	bne.n	8003548 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000000 	.word	0x20000000

08003620 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	@ 0x28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003632:	f7fd fbf1 	bl	8000e18 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	4413      	add	r3, r2
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003642:	f7fd fbe9 	bl	8000e18 <HAL_GetTick>
 8003646:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003650:	4b3d      	ldr	r3, [pc, #244]	@ (8003748 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	00da      	lsls	r2, r3, #3
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	0d1b      	lsrs	r3, r3, #20
 8003660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003668:	e060      	b.n	800372c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003670:	d107      	bne.n	8003682 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d104      	bne.n	8003682 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003680:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003688:	d050      	beq.n	800372c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800368a:	f7fd fbc5 	bl	8000e18 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003696:	429a      	cmp	r2, r3
 8003698:	d902      	bls.n	80036a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	d13d      	bne.n	800371c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036b8:	d111      	bne.n	80036de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c2:	d004      	beq.n	80036ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036cc:	d107      	bne.n	80036de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036e6:	d10f      	bne.n	8003708 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003706:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e010      	b.n	800373e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	3b01      	subs	r3, #1
 800372a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d196      	bne.n	800366a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3728      	adds	r7, #40	@ 0x28
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000000 	.word	0x20000000

0800374c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003760:	d111      	bne.n	8003786 <SPI_EndRxTransaction+0x3a>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800376a:	d004      	beq.n	8003776 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003774:	d107      	bne.n	8003786 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003784:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2200      	movs	r2, #0
 800378e:	2180      	movs	r1, #128	@ 0x80
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff febd 	bl	8003510 <SPI_WaitFlagStateUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e023      	b.n	80037f4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037b4:	d11d      	bne.n	80037f2 <SPI_EndRxTransaction+0xa6>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037be:	d004      	beq.n	80037ca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c8:	d113      	bne.n	80037f2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f7ff ff22 	bl	8003620 <SPI_WaitFifoStateUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e6:	f043 0220 	orr.w	r2, r3, #32
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e000      	b.n	80037f4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2200      	movs	r2, #0
 8003810:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7ff ff03 	bl	8003620 <SPI_WaitFifoStateUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d007      	beq.n	8003830 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e027      	b.n	8003880 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2200      	movs	r2, #0
 8003838:	2180      	movs	r1, #128	@ 0x80
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff fe68 	bl	8003510 <SPI_WaitFlagStateUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384a:	f043 0220 	orr.w	r2, r3, #32
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e014      	b.n	8003880 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2200      	movs	r2, #0
 800385e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fedc 	bl	8003620 <SPI_WaitFifoStateUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e000      	b.n	8003880 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e049      	b.n	800392e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f841 	bl	8003936 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f000 f9da 	bl	8003c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d001      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e04f      	b.n	8003a04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a23      	ldr	r2, [pc, #140]	@ (8003a10 <HAL_TIM_Base_Start_IT+0xc4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01d      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398e:	d018      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1f      	ldr	r2, [pc, #124]	@ (8003a14 <HAL_TIM_Base_Start_IT+0xc8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1e      	ldr	r2, [pc, #120]	@ (8003a18 <HAL_TIM_Base_Start_IT+0xcc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00e      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a1c <HAL_TIM_Base_Start_IT+0xd0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d009      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003a20 <HAL_TIM_Base_Start_IT+0xd4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x76>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a19      	ldr	r2, [pc, #100]	@ (8003a24 <HAL_TIM_Base_Start_IT+0xd8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d115      	bne.n	80039ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	4b17      	ldr	r3, [pc, #92]	@ (8003a28 <HAL_TIM_Base_Start_IT+0xdc>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d015      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0xb4>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039da:	d011      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ec:	e008      	b.n	8003a00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e000      	b.n	8003a02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40000800 	.word	0x40000800
 8003a1c:	40013400 	.word	0x40013400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40015000 	.word	0x40015000
 8003a28:	00010007 	.word	0x00010007

08003a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d020      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01b      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0202 	mvn.w	r2, #2
 8003a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f8e4 	bl	8003c44 <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8d6 	bl	8003c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f8e7 	bl	8003c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d020      	beq.n	8003adc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01b      	beq.n	8003adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0204 	mvn.w	r2, #4
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8be 	bl	8003c44 <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8b0 	bl	8003c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f8c1 	bl	8003c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d020      	beq.n	8003b28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01b      	beq.n	8003b28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0208 	mvn.w	r2, #8
 8003af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2204      	movs	r2, #4
 8003afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f898 	bl	8003c44 <HAL_TIM_IC_CaptureCallback>
 8003b14:	e005      	b.n	8003b22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f88a 	bl	8003c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f89b 	bl	8003c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d020      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01b      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0210 	mvn.w	r2, #16
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f872 	bl	8003c44 <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f864 	bl	8003c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f875 	bl	8003c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00c      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0201 	mvn.w	r2, #1
 8003b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fc fe5c 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f916 	bl	8003de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00c      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f90e 	bl	8003dfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00c      	beq.n	8003c04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f834 	bl	8003c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00c      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0220 	mvn.w	r2, #32
 8003c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f8d6 	bl	8003dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a48      	ldr	r2, [pc, #288]	@ (8003db4 <TIM_Base_SetConfig+0x134>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d013      	beq.n	8003cc0 <TIM_Base_SetConfig+0x40>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9e:	d00f      	beq.n	8003cc0 <TIM_Base_SetConfig+0x40>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a45      	ldr	r2, [pc, #276]	@ (8003db8 <TIM_Base_SetConfig+0x138>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00b      	beq.n	8003cc0 <TIM_Base_SetConfig+0x40>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a44      	ldr	r2, [pc, #272]	@ (8003dbc <TIM_Base_SetConfig+0x13c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d007      	beq.n	8003cc0 <TIM_Base_SetConfig+0x40>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a43      	ldr	r2, [pc, #268]	@ (8003dc0 <TIM_Base_SetConfig+0x140>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_Base_SetConfig+0x40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a42      	ldr	r2, [pc, #264]	@ (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d108      	bne.n	8003cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a37      	ldr	r2, [pc, #220]	@ (8003db4 <TIM_Base_SetConfig+0x134>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01f      	beq.n	8003d1a <TIM_Base_SetConfig+0x9a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce0:	d01b      	beq.n	8003d1a <TIM_Base_SetConfig+0x9a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a34      	ldr	r2, [pc, #208]	@ (8003db8 <TIM_Base_SetConfig+0x138>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d017      	beq.n	8003d1a <TIM_Base_SetConfig+0x9a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a33      	ldr	r2, [pc, #204]	@ (8003dbc <TIM_Base_SetConfig+0x13c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <TIM_Base_SetConfig+0x9a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a32      	ldr	r2, [pc, #200]	@ (8003dc0 <TIM_Base_SetConfig+0x140>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00f      	beq.n	8003d1a <TIM_Base_SetConfig+0x9a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a32      	ldr	r2, [pc, #200]	@ (8003dc8 <TIM_Base_SetConfig+0x148>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00b      	beq.n	8003d1a <TIM_Base_SetConfig+0x9a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a31      	ldr	r2, [pc, #196]	@ (8003dcc <TIM_Base_SetConfig+0x14c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d007      	beq.n	8003d1a <TIM_Base_SetConfig+0x9a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a30      	ldr	r2, [pc, #192]	@ (8003dd0 <TIM_Base_SetConfig+0x150>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_Base_SetConfig+0x9a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d108      	bne.n	8003d2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a18      	ldr	r2, [pc, #96]	@ (8003db4 <TIM_Base_SetConfig+0x134>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <TIM_Base_SetConfig+0x100>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a19      	ldr	r2, [pc, #100]	@ (8003dc0 <TIM_Base_SetConfig+0x140>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00f      	beq.n	8003d80 <TIM_Base_SetConfig+0x100>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a19      	ldr	r2, [pc, #100]	@ (8003dc8 <TIM_Base_SetConfig+0x148>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00b      	beq.n	8003d80 <TIM_Base_SetConfig+0x100>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a18      	ldr	r2, [pc, #96]	@ (8003dcc <TIM_Base_SetConfig+0x14c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <TIM_Base_SetConfig+0x100>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a17      	ldr	r2, [pc, #92]	@ (8003dd0 <TIM_Base_SetConfig+0x150>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_Base_SetConfig+0x100>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a12      	ldr	r2, [pc, #72]	@ (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d103      	bne.n	8003d88 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d105      	bne.n	8003da6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f023 0201 	bic.w	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]
  }
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40015000 	.word	0x40015000
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40014400 	.word	0x40014400
 8003dd0:	40014800 	.word	0x40014800

08003dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e040      	b.n	8003ea4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fc ff5a 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	@ 0x24
 8003e3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f9fc 	bl	8004254 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f825 	bl	8003eac <UART_SetConfig>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e01b      	b.n	8003ea4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fa7b 	bl	8004398 <UART_CheckIdleState>
 8003ea2:	4603      	mov	r3, r0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b92      	ldr	r3, [pc, #584]	@ (8004120 <UART_SetConfig+0x274>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a80      	ldr	r2, [pc, #512]	@ (8004124 <UART_SetConfig+0x278>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d120      	bne.n	8003f6a <UART_SetConfig+0xbe>
 8003f28:	4b7f      	ldr	r3, [pc, #508]	@ (8004128 <UART_SetConfig+0x27c>)
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d817      	bhi.n	8003f64 <UART_SetConfig+0xb8>
 8003f34:	a201      	add	r2, pc, #4	@ (adr r2, 8003f3c <UART_SetConfig+0x90>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f59 	.word	0x08003f59
 8003f44:	08003f5f 	.word	0x08003f5f
 8003f48:	08003f53 	.word	0x08003f53
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e0b5      	b.n	80040be <UART_SetConfig+0x212>
 8003f52:	2302      	movs	r3, #2
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e0b2      	b.n	80040be <UART_SetConfig+0x212>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e0af      	b.n	80040be <UART_SetConfig+0x212>
 8003f5e:	2308      	movs	r3, #8
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e0ac      	b.n	80040be <UART_SetConfig+0x212>
 8003f64:	2310      	movs	r3, #16
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e0a9      	b.n	80040be <UART_SetConfig+0x212>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a6f      	ldr	r2, [pc, #444]	@ (800412c <UART_SetConfig+0x280>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d124      	bne.n	8003fbe <UART_SetConfig+0x112>
 8003f74:	4b6c      	ldr	r3, [pc, #432]	@ (8004128 <UART_SetConfig+0x27c>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f80:	d011      	beq.n	8003fa6 <UART_SetConfig+0xfa>
 8003f82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f86:	d817      	bhi.n	8003fb8 <UART_SetConfig+0x10c>
 8003f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f8c:	d011      	beq.n	8003fb2 <UART_SetConfig+0x106>
 8003f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f92:	d811      	bhi.n	8003fb8 <UART_SetConfig+0x10c>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <UART_SetConfig+0xf4>
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f9c:	d006      	beq.n	8003fac <UART_SetConfig+0x100>
 8003f9e:	e00b      	b.n	8003fb8 <UART_SetConfig+0x10c>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e08b      	b.n	80040be <UART_SetConfig+0x212>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	77fb      	strb	r3, [r7, #31]
 8003faa:	e088      	b.n	80040be <UART_SetConfig+0x212>
 8003fac:	2304      	movs	r3, #4
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e085      	b.n	80040be <UART_SetConfig+0x212>
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e082      	b.n	80040be <UART_SetConfig+0x212>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e07f      	b.n	80040be <UART_SetConfig+0x212>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8004130 <UART_SetConfig+0x284>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d124      	bne.n	8004012 <UART_SetConfig+0x166>
 8003fc8:	4b57      	ldr	r3, [pc, #348]	@ (8004128 <UART_SetConfig+0x27c>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003fd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003fd4:	d011      	beq.n	8003ffa <UART_SetConfig+0x14e>
 8003fd6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003fda:	d817      	bhi.n	800400c <UART_SetConfig+0x160>
 8003fdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003fe0:	d011      	beq.n	8004006 <UART_SetConfig+0x15a>
 8003fe2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003fe6:	d811      	bhi.n	800400c <UART_SetConfig+0x160>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <UART_SetConfig+0x148>
 8003fec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ff0:	d006      	beq.n	8004000 <UART_SetConfig+0x154>
 8003ff2:	e00b      	b.n	800400c <UART_SetConfig+0x160>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e061      	b.n	80040be <UART_SetConfig+0x212>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	77fb      	strb	r3, [r7, #31]
 8003ffe:	e05e      	b.n	80040be <UART_SetConfig+0x212>
 8004000:	2304      	movs	r3, #4
 8004002:	77fb      	strb	r3, [r7, #31]
 8004004:	e05b      	b.n	80040be <UART_SetConfig+0x212>
 8004006:	2308      	movs	r3, #8
 8004008:	77fb      	strb	r3, [r7, #31]
 800400a:	e058      	b.n	80040be <UART_SetConfig+0x212>
 800400c:	2310      	movs	r3, #16
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	e055      	b.n	80040be <UART_SetConfig+0x212>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a47      	ldr	r2, [pc, #284]	@ (8004134 <UART_SetConfig+0x288>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d124      	bne.n	8004066 <UART_SetConfig+0x1ba>
 800401c:	4b42      	ldr	r3, [pc, #264]	@ (8004128 <UART_SetConfig+0x27c>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004020:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004024:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004028:	d011      	beq.n	800404e <UART_SetConfig+0x1a2>
 800402a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800402e:	d817      	bhi.n	8004060 <UART_SetConfig+0x1b4>
 8004030:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004034:	d011      	beq.n	800405a <UART_SetConfig+0x1ae>
 8004036:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800403a:	d811      	bhi.n	8004060 <UART_SetConfig+0x1b4>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <UART_SetConfig+0x19c>
 8004040:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004044:	d006      	beq.n	8004054 <UART_SetConfig+0x1a8>
 8004046:	e00b      	b.n	8004060 <UART_SetConfig+0x1b4>
 8004048:	2300      	movs	r3, #0
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e037      	b.n	80040be <UART_SetConfig+0x212>
 800404e:	2302      	movs	r3, #2
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e034      	b.n	80040be <UART_SetConfig+0x212>
 8004054:	2304      	movs	r3, #4
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e031      	b.n	80040be <UART_SetConfig+0x212>
 800405a:	2308      	movs	r3, #8
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e02e      	b.n	80040be <UART_SetConfig+0x212>
 8004060:	2310      	movs	r3, #16
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e02b      	b.n	80040be <UART_SetConfig+0x212>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a33      	ldr	r2, [pc, #204]	@ (8004138 <UART_SetConfig+0x28c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d124      	bne.n	80040ba <UART_SetConfig+0x20e>
 8004070:	4b2d      	ldr	r3, [pc, #180]	@ (8004128 <UART_SetConfig+0x27c>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004074:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004078:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800407c:	d011      	beq.n	80040a2 <UART_SetConfig+0x1f6>
 800407e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004082:	d817      	bhi.n	80040b4 <UART_SetConfig+0x208>
 8004084:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004088:	d011      	beq.n	80040ae <UART_SetConfig+0x202>
 800408a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800408e:	d811      	bhi.n	80040b4 <UART_SetConfig+0x208>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <UART_SetConfig+0x1f0>
 8004094:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004098:	d006      	beq.n	80040a8 <UART_SetConfig+0x1fc>
 800409a:	e00b      	b.n	80040b4 <UART_SetConfig+0x208>
 800409c:	2300      	movs	r3, #0
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e00d      	b.n	80040be <UART_SetConfig+0x212>
 80040a2:	2302      	movs	r3, #2
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e00a      	b.n	80040be <UART_SetConfig+0x212>
 80040a8:	2304      	movs	r3, #4
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e007      	b.n	80040be <UART_SetConfig+0x212>
 80040ae:	2308      	movs	r3, #8
 80040b0:	77fb      	strb	r3, [r7, #31]
 80040b2:	e004      	b.n	80040be <UART_SetConfig+0x212>
 80040b4:	2310      	movs	r3, #16
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e001      	b.n	80040be <UART_SetConfig+0x212>
 80040ba:	2310      	movs	r3, #16
 80040bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c6:	d16b      	bne.n	80041a0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80040c8:	7ffb      	ldrb	r3, [r7, #31]
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d838      	bhi.n	8004140 <UART_SetConfig+0x294>
 80040ce:	a201      	add	r2, pc, #4	@ (adr r2, 80040d4 <UART_SetConfig+0x228>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	08004101 	.word	0x08004101
 80040dc:	08004109 	.word	0x08004109
 80040e0:	08004141 	.word	0x08004141
 80040e4:	0800410f 	.word	0x0800410f
 80040e8:	08004141 	.word	0x08004141
 80040ec:	08004141 	.word	0x08004141
 80040f0:	08004141 	.word	0x08004141
 80040f4:	08004117 	.word	0x08004117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7fe fb72 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 80040fc:	61b8      	str	r0, [r7, #24]
        break;
 80040fe:	e024      	b.n	800414a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004100:	f7fe fb90 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8004104:	61b8      	str	r0, [r7, #24]
        break;
 8004106:	e020      	b.n	800414a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004108:	4b0c      	ldr	r3, [pc, #48]	@ (800413c <UART_SetConfig+0x290>)
 800410a:	61bb      	str	r3, [r7, #24]
        break;
 800410c:	e01d      	b.n	800414a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410e:	f7fe fb07 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8004112:	61b8      	str	r0, [r7, #24]
        break;
 8004114:	e019      	b.n	800414a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800411a:	61bb      	str	r3, [r7, #24]
        break;
 800411c:	e015      	b.n	800414a <UART_SetConfig+0x29e>
 800411e:	bf00      	nop
 8004120:	efff69f3 	.word	0xefff69f3
 8004124:	40013800 	.word	0x40013800
 8004128:	40021000 	.word	0x40021000
 800412c:	40004400 	.word	0x40004400
 8004130:	40004800 	.word	0x40004800
 8004134:	40004c00 	.word	0x40004c00
 8004138:	40005000 	.word	0x40005000
 800413c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	77bb      	strb	r3, [r7, #30]
        break;
 8004148:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d073      	beq.n	8004238 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	005a      	lsls	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	441a      	add	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b0f      	cmp	r3, #15
 800416a:	d916      	bls.n	800419a <UART_SetConfig+0x2ee>
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004172:	d212      	bcs.n	800419a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	b29b      	uxth	r3, r3
 8004178:	f023 030f 	bic.w	r3, r3, #15
 800417c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	b29b      	uxth	r3, r3
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	b29a      	uxth	r2, r3
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	4313      	orrs	r3, r2
 800418e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	89fa      	ldrh	r2, [r7, #14]
 8004196:	60da      	str	r2, [r3, #12]
 8004198:	e04e      	b.n	8004238 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	77bb      	strb	r3, [r7, #30]
 800419e:	e04b      	b.n	8004238 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041a0:	7ffb      	ldrb	r3, [r7, #31]
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d827      	bhi.n	80041f6 <UART_SetConfig+0x34a>
 80041a6:	a201      	add	r2, pc, #4	@ (adr r2, 80041ac <UART_SetConfig+0x300>)
 80041a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ac:	080041d1 	.word	0x080041d1
 80041b0:	080041d9 	.word	0x080041d9
 80041b4:	080041e1 	.word	0x080041e1
 80041b8:	080041f7 	.word	0x080041f7
 80041bc:	080041e7 	.word	0x080041e7
 80041c0:	080041f7 	.word	0x080041f7
 80041c4:	080041f7 	.word	0x080041f7
 80041c8:	080041f7 	.word	0x080041f7
 80041cc:	080041ef 	.word	0x080041ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d0:	f7fe fb06 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 80041d4:	61b8      	str	r0, [r7, #24]
        break;
 80041d6:	e013      	b.n	8004200 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d8:	f7fe fb24 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 80041dc:	61b8      	str	r0, [r7, #24]
        break;
 80041de:	e00f      	b.n	8004200 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004250 <UART_SetConfig+0x3a4>)
 80041e2:	61bb      	str	r3, [r7, #24]
        break;
 80041e4:	e00c      	b.n	8004200 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041e6:	f7fe fa9b 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80041ea:	61b8      	str	r0, [r7, #24]
        break;
 80041ec:	e008      	b.n	8004200 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041f2:	61bb      	str	r3, [r7, #24]
        break;
 80041f4:	e004      	b.n	8004200 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	77bb      	strb	r3, [r7, #30]
        break;
 80041fe:	bf00      	nop
    }

    if (pclk != 0U)
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d018      	beq.n	8004238 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	085a      	lsrs	r2, r3, #1
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	441a      	add	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b0f      	cmp	r3, #15
 800421e:	d909      	bls.n	8004234 <UART_SetConfig+0x388>
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004226:	d205      	bcs.n	8004234 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	b29a      	uxth	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	e001      	b.n	8004238 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004244:	7fbb      	ldrb	r3, [r7, #30]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	007a1200 	.word	0x007a1200

08004254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01a      	beq.n	800436a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004352:	d10a      	bne.n	800436a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	605a      	str	r2, [r3, #4]
  }
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b098      	sub	sp, #96	@ 0x60
 800439c:	af02      	add	r7, sp, #8
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043a8:	f7fc fd36 	bl	8000e18 <HAL_GetTick>
 80043ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d12e      	bne.n	800441a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c4:	2200      	movs	r2, #0
 80043c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f88c 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d021      	beq.n	800441a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e6      	bne.n	80043d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e062      	b.n	80044e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b04      	cmp	r3, #4
 8004426:	d149      	bne.n	80044bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004428:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004430:	2200      	movs	r2, #0
 8004432:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f856 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d03c      	beq.n	80044bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	623b      	str	r3, [r7, #32]
   return(result);
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004460:	633b      	str	r3, [r7, #48]	@ 0x30
 8004462:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800446e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e6      	bne.n	8004442 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3308      	adds	r3, #8
 800447a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	60fb      	str	r3, [r7, #12]
   return(result);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004494:	61fa      	str	r2, [r7, #28]
 8004496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	617b      	str	r3, [r7, #20]
   return(result);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e5      	bne.n	8004474 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e011      	b.n	80044e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3758      	adds	r7, #88	@ 0x58
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	4613      	mov	r3, r2
 80044f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f8:	e04f      	b.n	800459a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004500:	d04b      	beq.n	800459a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7fc fc89 	bl	8000e18 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <UART_WaitOnFlagUntilTimeout+0x30>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e04e      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d037      	beq.n	800459a <UART_WaitOnFlagUntilTimeout+0xb2>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b80      	cmp	r3, #128	@ 0x80
 800452e:	d034      	beq.n	800459a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b40      	cmp	r3, #64	@ 0x40
 8004534:	d031      	beq.n	800459a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b08      	cmp	r3, #8
 8004542:	d110      	bne.n	8004566 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2208      	movs	r2, #8
 800454a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f838 	bl	80045c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2208      	movs	r2, #8
 8004556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e029      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004574:	d111      	bne.n	800459a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800457e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f81e 	bl	80045c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e00f      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d0a0      	beq.n	80044fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b095      	sub	sp, #84	@ 0x54
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80045ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e6      	bne.n	80045ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3308      	adds	r3, #8
 8004602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	61fb      	str	r3, [r7, #28]
   return(result);
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3308      	adds	r3, #8
 800461a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800461c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800461e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004634:	2b01      	cmp	r3, #1
 8004636:	d118      	bne.n	800466a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	60bb      	str	r3, [r7, #8]
   return(result);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f023 0310 	bic.w	r3, r3, #16
 800464c:	647b      	str	r3, [r7, #68]	@ 0x44
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6979      	ldr	r1, [r7, #20]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	613b      	str	r3, [r7, #16]
   return(result);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e6      	bne.n	8004638 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800467e:	bf00      	nop
 8004680:	3754      	adds	r7, #84	@ 0x54
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <std>:
 800468c:	2300      	movs	r3, #0
 800468e:	b510      	push	{r4, lr}
 8004690:	4604      	mov	r4, r0
 8004692:	e9c0 3300 	strd	r3, r3, [r0]
 8004696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800469a:	6083      	str	r3, [r0, #8]
 800469c:	8181      	strh	r1, [r0, #12]
 800469e:	6643      	str	r3, [r0, #100]	@ 0x64
 80046a0:	81c2      	strh	r2, [r0, #14]
 80046a2:	6183      	str	r3, [r0, #24]
 80046a4:	4619      	mov	r1, r3
 80046a6:	2208      	movs	r2, #8
 80046a8:	305c      	adds	r0, #92	@ 0x5c
 80046aa:	f000 f906 	bl	80048ba <memset>
 80046ae:	4b0d      	ldr	r3, [pc, #52]	@ (80046e4 <std+0x58>)
 80046b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <std+0x5c>)
 80046b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046b6:	4b0d      	ldr	r3, [pc, #52]	@ (80046ec <std+0x60>)
 80046b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046ba:	4b0d      	ldr	r3, [pc, #52]	@ (80046f0 <std+0x64>)
 80046bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80046be:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <std+0x68>)
 80046c0:	6224      	str	r4, [r4, #32]
 80046c2:	429c      	cmp	r4, r3
 80046c4:	d006      	beq.n	80046d4 <std+0x48>
 80046c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046ca:	4294      	cmp	r4, r2
 80046cc:	d002      	beq.n	80046d4 <std+0x48>
 80046ce:	33d0      	adds	r3, #208	@ 0xd0
 80046d0:	429c      	cmp	r4, r3
 80046d2:	d105      	bne.n	80046e0 <std+0x54>
 80046d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046dc:	f000 b966 	b.w	80049ac <__retarget_lock_init_recursive>
 80046e0:	bd10      	pop	{r4, pc}
 80046e2:	bf00      	nop
 80046e4:	08004835 	.word	0x08004835
 80046e8:	08004857 	.word	0x08004857
 80046ec:	0800488f 	.word	0x0800488f
 80046f0:	080048b3 	.word	0x080048b3
 80046f4:	200001c4 	.word	0x200001c4

080046f8 <stdio_exit_handler>:
 80046f8:	4a02      	ldr	r2, [pc, #8]	@ (8004704 <stdio_exit_handler+0xc>)
 80046fa:	4903      	ldr	r1, [pc, #12]	@ (8004708 <stdio_exit_handler+0x10>)
 80046fc:	4803      	ldr	r0, [pc, #12]	@ (800470c <stdio_exit_handler+0x14>)
 80046fe:	f000 b869 	b.w	80047d4 <_fwalk_sglue>
 8004702:	bf00      	nop
 8004704:	2000000c 	.word	0x2000000c
 8004708:	0800524d 	.word	0x0800524d
 800470c:	2000001c 	.word	0x2000001c

08004710 <cleanup_stdio>:
 8004710:	6841      	ldr	r1, [r0, #4]
 8004712:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <cleanup_stdio+0x34>)
 8004714:	4299      	cmp	r1, r3
 8004716:	b510      	push	{r4, lr}
 8004718:	4604      	mov	r4, r0
 800471a:	d001      	beq.n	8004720 <cleanup_stdio+0x10>
 800471c:	f000 fd96 	bl	800524c <_fflush_r>
 8004720:	68a1      	ldr	r1, [r4, #8]
 8004722:	4b09      	ldr	r3, [pc, #36]	@ (8004748 <cleanup_stdio+0x38>)
 8004724:	4299      	cmp	r1, r3
 8004726:	d002      	beq.n	800472e <cleanup_stdio+0x1e>
 8004728:	4620      	mov	r0, r4
 800472a:	f000 fd8f 	bl	800524c <_fflush_r>
 800472e:	68e1      	ldr	r1, [r4, #12]
 8004730:	4b06      	ldr	r3, [pc, #24]	@ (800474c <cleanup_stdio+0x3c>)
 8004732:	4299      	cmp	r1, r3
 8004734:	d004      	beq.n	8004740 <cleanup_stdio+0x30>
 8004736:	4620      	mov	r0, r4
 8004738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800473c:	f000 bd86 	b.w	800524c <_fflush_r>
 8004740:	bd10      	pop	{r4, pc}
 8004742:	bf00      	nop
 8004744:	200001c4 	.word	0x200001c4
 8004748:	2000022c 	.word	0x2000022c
 800474c:	20000294 	.word	0x20000294

08004750 <global_stdio_init.part.0>:
 8004750:	b510      	push	{r4, lr}
 8004752:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <global_stdio_init.part.0+0x30>)
 8004754:	4c0b      	ldr	r4, [pc, #44]	@ (8004784 <global_stdio_init.part.0+0x34>)
 8004756:	4a0c      	ldr	r2, [pc, #48]	@ (8004788 <global_stdio_init.part.0+0x38>)
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	4620      	mov	r0, r4
 800475c:	2200      	movs	r2, #0
 800475e:	2104      	movs	r1, #4
 8004760:	f7ff ff94 	bl	800468c <std>
 8004764:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004768:	2201      	movs	r2, #1
 800476a:	2109      	movs	r1, #9
 800476c:	f7ff ff8e 	bl	800468c <std>
 8004770:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004774:	2202      	movs	r2, #2
 8004776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800477a:	2112      	movs	r1, #18
 800477c:	f7ff bf86 	b.w	800468c <std>
 8004780:	200002fc 	.word	0x200002fc
 8004784:	200001c4 	.word	0x200001c4
 8004788:	080046f9 	.word	0x080046f9

0800478c <__sfp_lock_acquire>:
 800478c:	4801      	ldr	r0, [pc, #4]	@ (8004794 <__sfp_lock_acquire+0x8>)
 800478e:	f000 b90e 	b.w	80049ae <__retarget_lock_acquire_recursive>
 8004792:	bf00      	nop
 8004794:	20000305 	.word	0x20000305

08004798 <__sfp_lock_release>:
 8004798:	4801      	ldr	r0, [pc, #4]	@ (80047a0 <__sfp_lock_release+0x8>)
 800479a:	f000 b909 	b.w	80049b0 <__retarget_lock_release_recursive>
 800479e:	bf00      	nop
 80047a0:	20000305 	.word	0x20000305

080047a4 <__sinit>:
 80047a4:	b510      	push	{r4, lr}
 80047a6:	4604      	mov	r4, r0
 80047a8:	f7ff fff0 	bl	800478c <__sfp_lock_acquire>
 80047ac:	6a23      	ldr	r3, [r4, #32]
 80047ae:	b11b      	cbz	r3, 80047b8 <__sinit+0x14>
 80047b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b4:	f7ff bff0 	b.w	8004798 <__sfp_lock_release>
 80047b8:	4b04      	ldr	r3, [pc, #16]	@ (80047cc <__sinit+0x28>)
 80047ba:	6223      	str	r3, [r4, #32]
 80047bc:	4b04      	ldr	r3, [pc, #16]	@ (80047d0 <__sinit+0x2c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f5      	bne.n	80047b0 <__sinit+0xc>
 80047c4:	f7ff ffc4 	bl	8004750 <global_stdio_init.part.0>
 80047c8:	e7f2      	b.n	80047b0 <__sinit+0xc>
 80047ca:	bf00      	nop
 80047cc:	08004711 	.word	0x08004711
 80047d0:	200002fc 	.word	0x200002fc

080047d4 <_fwalk_sglue>:
 80047d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047d8:	4607      	mov	r7, r0
 80047da:	4688      	mov	r8, r1
 80047dc:	4614      	mov	r4, r2
 80047de:	2600      	movs	r6, #0
 80047e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047e4:	f1b9 0901 	subs.w	r9, r9, #1
 80047e8:	d505      	bpl.n	80047f6 <_fwalk_sglue+0x22>
 80047ea:	6824      	ldr	r4, [r4, #0]
 80047ec:	2c00      	cmp	r4, #0
 80047ee:	d1f7      	bne.n	80047e0 <_fwalk_sglue+0xc>
 80047f0:	4630      	mov	r0, r6
 80047f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047f6:	89ab      	ldrh	r3, [r5, #12]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d907      	bls.n	800480c <_fwalk_sglue+0x38>
 80047fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004800:	3301      	adds	r3, #1
 8004802:	d003      	beq.n	800480c <_fwalk_sglue+0x38>
 8004804:	4629      	mov	r1, r5
 8004806:	4638      	mov	r0, r7
 8004808:	47c0      	blx	r8
 800480a:	4306      	orrs	r6, r0
 800480c:	3568      	adds	r5, #104	@ 0x68
 800480e:	e7e9      	b.n	80047e4 <_fwalk_sglue+0x10>

08004810 <iprintf>:
 8004810:	b40f      	push	{r0, r1, r2, r3}
 8004812:	b507      	push	{r0, r1, r2, lr}
 8004814:	4906      	ldr	r1, [pc, #24]	@ (8004830 <iprintf+0x20>)
 8004816:	ab04      	add	r3, sp, #16
 8004818:	6808      	ldr	r0, [r1, #0]
 800481a:	f853 2b04 	ldr.w	r2, [r3], #4
 800481e:	6881      	ldr	r1, [r0, #8]
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	f000 f9e9 	bl	8004bf8 <_vfiprintf_r>
 8004826:	b003      	add	sp, #12
 8004828:	f85d eb04 	ldr.w	lr, [sp], #4
 800482c:	b004      	add	sp, #16
 800482e:	4770      	bx	lr
 8004830:	20000018 	.word	0x20000018

08004834 <__sread>:
 8004834:	b510      	push	{r4, lr}
 8004836:	460c      	mov	r4, r1
 8004838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483c:	f000 f868 	bl	8004910 <_read_r>
 8004840:	2800      	cmp	r0, #0
 8004842:	bfab      	itete	ge
 8004844:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004846:	89a3      	ldrhlt	r3, [r4, #12]
 8004848:	181b      	addge	r3, r3, r0
 800484a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800484e:	bfac      	ite	ge
 8004850:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004852:	81a3      	strhlt	r3, [r4, #12]
 8004854:	bd10      	pop	{r4, pc}

08004856 <__swrite>:
 8004856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800485a:	461f      	mov	r7, r3
 800485c:	898b      	ldrh	r3, [r1, #12]
 800485e:	05db      	lsls	r3, r3, #23
 8004860:	4605      	mov	r5, r0
 8004862:	460c      	mov	r4, r1
 8004864:	4616      	mov	r6, r2
 8004866:	d505      	bpl.n	8004874 <__swrite+0x1e>
 8004868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486c:	2302      	movs	r3, #2
 800486e:	2200      	movs	r2, #0
 8004870:	f000 f83c 	bl	80048ec <_lseek_r>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800487a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800487e:	81a3      	strh	r3, [r4, #12]
 8004880:	4632      	mov	r2, r6
 8004882:	463b      	mov	r3, r7
 8004884:	4628      	mov	r0, r5
 8004886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800488a:	f000 b853 	b.w	8004934 <_write_r>

0800488e <__sseek>:
 800488e:	b510      	push	{r4, lr}
 8004890:	460c      	mov	r4, r1
 8004892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004896:	f000 f829 	bl	80048ec <_lseek_r>
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	bf15      	itete	ne
 80048a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048aa:	81a3      	strheq	r3, [r4, #12]
 80048ac:	bf18      	it	ne
 80048ae:	81a3      	strhne	r3, [r4, #12]
 80048b0:	bd10      	pop	{r4, pc}

080048b2 <__sclose>:
 80048b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b6:	f000 b809 	b.w	80048cc <_close_r>

080048ba <memset>:
 80048ba:	4402      	add	r2, r0
 80048bc:	4603      	mov	r3, r0
 80048be:	4293      	cmp	r3, r2
 80048c0:	d100      	bne.n	80048c4 <memset+0xa>
 80048c2:	4770      	bx	lr
 80048c4:	f803 1b01 	strb.w	r1, [r3], #1
 80048c8:	e7f9      	b.n	80048be <memset+0x4>
	...

080048cc <_close_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4d06      	ldr	r5, [pc, #24]	@ (80048e8 <_close_r+0x1c>)
 80048d0:	2300      	movs	r3, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	602b      	str	r3, [r5, #0]
 80048d8:	f7fc f95b 	bl	8000b92 <_close>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d102      	bne.n	80048e6 <_close_r+0x1a>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	b103      	cbz	r3, 80048e6 <_close_r+0x1a>
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	20000300 	.word	0x20000300

080048ec <_lseek_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4d07      	ldr	r5, [pc, #28]	@ (800490c <_lseek_r+0x20>)
 80048f0:	4604      	mov	r4, r0
 80048f2:	4608      	mov	r0, r1
 80048f4:	4611      	mov	r1, r2
 80048f6:	2200      	movs	r2, #0
 80048f8:	602a      	str	r2, [r5, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f7fc f970 	bl	8000be0 <_lseek>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_lseek_r+0x1e>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_lseek_r+0x1e>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	20000300 	.word	0x20000300

08004910 <_read_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4d07      	ldr	r5, [pc, #28]	@ (8004930 <_read_r+0x20>)
 8004914:	4604      	mov	r4, r0
 8004916:	4608      	mov	r0, r1
 8004918:	4611      	mov	r1, r2
 800491a:	2200      	movs	r2, #0
 800491c:	602a      	str	r2, [r5, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f7fc f8fe 	bl	8000b20 <_read>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_read_r+0x1e>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b103      	cbz	r3, 800492e <_read_r+0x1e>
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	20000300 	.word	0x20000300

08004934 <_write_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4d07      	ldr	r5, [pc, #28]	@ (8004954 <_write_r+0x20>)
 8004938:	4604      	mov	r4, r0
 800493a:	4608      	mov	r0, r1
 800493c:	4611      	mov	r1, r2
 800493e:	2200      	movs	r2, #0
 8004940:	602a      	str	r2, [r5, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	f7fc f909 	bl	8000b5a <_write>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d102      	bne.n	8004952 <_write_r+0x1e>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	b103      	cbz	r3, 8004952 <_write_r+0x1e>
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	20000300 	.word	0x20000300

08004958 <__errno>:
 8004958:	4b01      	ldr	r3, [pc, #4]	@ (8004960 <__errno+0x8>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000018 	.word	0x20000018

08004964 <__libc_init_array>:
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	4d0d      	ldr	r5, [pc, #52]	@ (800499c <__libc_init_array+0x38>)
 8004968:	4c0d      	ldr	r4, [pc, #52]	@ (80049a0 <__libc_init_array+0x3c>)
 800496a:	1b64      	subs	r4, r4, r5
 800496c:	10a4      	asrs	r4, r4, #2
 800496e:	2600      	movs	r6, #0
 8004970:	42a6      	cmp	r6, r4
 8004972:	d109      	bne.n	8004988 <__libc_init_array+0x24>
 8004974:	4d0b      	ldr	r5, [pc, #44]	@ (80049a4 <__libc_init_array+0x40>)
 8004976:	4c0c      	ldr	r4, [pc, #48]	@ (80049a8 <__libc_init_array+0x44>)
 8004978:	f000 fdb8 	bl	80054ec <_init>
 800497c:	1b64      	subs	r4, r4, r5
 800497e:	10a4      	asrs	r4, r4, #2
 8004980:	2600      	movs	r6, #0
 8004982:	42a6      	cmp	r6, r4
 8004984:	d105      	bne.n	8004992 <__libc_init_array+0x2e>
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	f855 3b04 	ldr.w	r3, [r5], #4
 800498c:	4798      	blx	r3
 800498e:	3601      	adds	r6, #1
 8004990:	e7ee      	b.n	8004970 <__libc_init_array+0xc>
 8004992:	f855 3b04 	ldr.w	r3, [r5], #4
 8004996:	4798      	blx	r3
 8004998:	3601      	adds	r6, #1
 800499a:	e7f2      	b.n	8004982 <__libc_init_array+0x1e>
 800499c:	080055b0 	.word	0x080055b0
 80049a0:	080055b0 	.word	0x080055b0
 80049a4:	080055b0 	.word	0x080055b0
 80049a8:	080055b4 	.word	0x080055b4

080049ac <__retarget_lock_init_recursive>:
 80049ac:	4770      	bx	lr

080049ae <__retarget_lock_acquire_recursive>:
 80049ae:	4770      	bx	lr

080049b0 <__retarget_lock_release_recursive>:
 80049b0:	4770      	bx	lr
	...

080049b4 <_free_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4605      	mov	r5, r0
 80049b8:	2900      	cmp	r1, #0
 80049ba:	d041      	beq.n	8004a40 <_free_r+0x8c>
 80049bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c0:	1f0c      	subs	r4, r1, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bfb8      	it	lt
 80049c6:	18e4      	addlt	r4, r4, r3
 80049c8:	f000 f8e0 	bl	8004b8c <__malloc_lock>
 80049cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a44 <_free_r+0x90>)
 80049ce:	6813      	ldr	r3, [r2, #0]
 80049d0:	b933      	cbnz	r3, 80049e0 <_free_r+0x2c>
 80049d2:	6063      	str	r3, [r4, #4]
 80049d4:	6014      	str	r4, [r2, #0]
 80049d6:	4628      	mov	r0, r5
 80049d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049dc:	f000 b8dc 	b.w	8004b98 <__malloc_unlock>
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	d908      	bls.n	80049f6 <_free_r+0x42>
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	1821      	adds	r1, r4, r0
 80049e8:	428b      	cmp	r3, r1
 80049ea:	bf01      	itttt	eq
 80049ec:	6819      	ldreq	r1, [r3, #0]
 80049ee:	685b      	ldreq	r3, [r3, #4]
 80049f0:	1809      	addeq	r1, r1, r0
 80049f2:	6021      	streq	r1, [r4, #0]
 80049f4:	e7ed      	b.n	80049d2 <_free_r+0x1e>
 80049f6:	461a      	mov	r2, r3
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	b10b      	cbz	r3, 8004a00 <_free_r+0x4c>
 80049fc:	42a3      	cmp	r3, r4
 80049fe:	d9fa      	bls.n	80049f6 <_free_r+0x42>
 8004a00:	6811      	ldr	r1, [r2, #0]
 8004a02:	1850      	adds	r0, r2, r1
 8004a04:	42a0      	cmp	r0, r4
 8004a06:	d10b      	bne.n	8004a20 <_free_r+0x6c>
 8004a08:	6820      	ldr	r0, [r4, #0]
 8004a0a:	4401      	add	r1, r0
 8004a0c:	1850      	adds	r0, r2, r1
 8004a0e:	4283      	cmp	r3, r0
 8004a10:	6011      	str	r1, [r2, #0]
 8004a12:	d1e0      	bne.n	80049d6 <_free_r+0x22>
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	6053      	str	r3, [r2, #4]
 8004a1a:	4408      	add	r0, r1
 8004a1c:	6010      	str	r0, [r2, #0]
 8004a1e:	e7da      	b.n	80049d6 <_free_r+0x22>
 8004a20:	d902      	bls.n	8004a28 <_free_r+0x74>
 8004a22:	230c      	movs	r3, #12
 8004a24:	602b      	str	r3, [r5, #0]
 8004a26:	e7d6      	b.n	80049d6 <_free_r+0x22>
 8004a28:	6820      	ldr	r0, [r4, #0]
 8004a2a:	1821      	adds	r1, r4, r0
 8004a2c:	428b      	cmp	r3, r1
 8004a2e:	bf04      	itt	eq
 8004a30:	6819      	ldreq	r1, [r3, #0]
 8004a32:	685b      	ldreq	r3, [r3, #4]
 8004a34:	6063      	str	r3, [r4, #4]
 8004a36:	bf04      	itt	eq
 8004a38:	1809      	addeq	r1, r1, r0
 8004a3a:	6021      	streq	r1, [r4, #0]
 8004a3c:	6054      	str	r4, [r2, #4]
 8004a3e:	e7ca      	b.n	80049d6 <_free_r+0x22>
 8004a40:	bd38      	pop	{r3, r4, r5, pc}
 8004a42:	bf00      	nop
 8004a44:	2000030c 	.word	0x2000030c

08004a48 <sbrk_aligned>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	4e0f      	ldr	r6, [pc, #60]	@ (8004a88 <sbrk_aligned+0x40>)
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	6831      	ldr	r1, [r6, #0]
 8004a50:	4605      	mov	r5, r0
 8004a52:	b911      	cbnz	r1, 8004a5a <sbrk_aligned+0x12>
 8004a54:	f000 fcb6 	bl	80053c4 <_sbrk_r>
 8004a58:	6030      	str	r0, [r6, #0]
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f000 fcb1 	bl	80053c4 <_sbrk_r>
 8004a62:	1c43      	adds	r3, r0, #1
 8004a64:	d103      	bne.n	8004a6e <sbrk_aligned+0x26>
 8004a66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	bd70      	pop	{r4, r5, r6, pc}
 8004a6e:	1cc4      	adds	r4, r0, #3
 8004a70:	f024 0403 	bic.w	r4, r4, #3
 8004a74:	42a0      	cmp	r0, r4
 8004a76:	d0f8      	beq.n	8004a6a <sbrk_aligned+0x22>
 8004a78:	1a21      	subs	r1, r4, r0
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f000 fca2 	bl	80053c4 <_sbrk_r>
 8004a80:	3001      	adds	r0, #1
 8004a82:	d1f2      	bne.n	8004a6a <sbrk_aligned+0x22>
 8004a84:	e7ef      	b.n	8004a66 <sbrk_aligned+0x1e>
 8004a86:	bf00      	nop
 8004a88:	20000308 	.word	0x20000308

08004a8c <_malloc_r>:
 8004a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a90:	1ccd      	adds	r5, r1, #3
 8004a92:	f025 0503 	bic.w	r5, r5, #3
 8004a96:	3508      	adds	r5, #8
 8004a98:	2d0c      	cmp	r5, #12
 8004a9a:	bf38      	it	cc
 8004a9c:	250c      	movcc	r5, #12
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	db01      	blt.n	8004aa8 <_malloc_r+0x1c>
 8004aa4:	42a9      	cmp	r1, r5
 8004aa6:	d904      	bls.n	8004ab2 <_malloc_r+0x26>
 8004aa8:	230c      	movs	r3, #12
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	2000      	movs	r0, #0
 8004aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ab2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b88 <_malloc_r+0xfc>
 8004ab6:	f000 f869 	bl	8004b8c <__malloc_lock>
 8004aba:	f8d8 3000 	ldr.w	r3, [r8]
 8004abe:	461c      	mov	r4, r3
 8004ac0:	bb44      	cbnz	r4, 8004b14 <_malloc_r+0x88>
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f7ff ffbf 	bl	8004a48 <sbrk_aligned>
 8004aca:	1c43      	adds	r3, r0, #1
 8004acc:	4604      	mov	r4, r0
 8004ace:	d158      	bne.n	8004b82 <_malloc_r+0xf6>
 8004ad0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ad4:	4627      	mov	r7, r4
 8004ad6:	2f00      	cmp	r7, #0
 8004ad8:	d143      	bne.n	8004b62 <_malloc_r+0xd6>
 8004ada:	2c00      	cmp	r4, #0
 8004adc:	d04b      	beq.n	8004b76 <_malloc_r+0xea>
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	4639      	mov	r1, r7
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	eb04 0903 	add.w	r9, r4, r3
 8004ae8:	f000 fc6c 	bl	80053c4 <_sbrk_r>
 8004aec:	4581      	cmp	r9, r0
 8004aee:	d142      	bne.n	8004b76 <_malloc_r+0xea>
 8004af0:	6821      	ldr	r1, [r4, #0]
 8004af2:	1a6d      	subs	r5, r5, r1
 8004af4:	4629      	mov	r1, r5
 8004af6:	4630      	mov	r0, r6
 8004af8:	f7ff ffa6 	bl	8004a48 <sbrk_aligned>
 8004afc:	3001      	adds	r0, #1
 8004afe:	d03a      	beq.n	8004b76 <_malloc_r+0xea>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	442b      	add	r3, r5
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	f8d8 3000 	ldr.w	r3, [r8]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	bb62      	cbnz	r2, 8004b68 <_malloc_r+0xdc>
 8004b0e:	f8c8 7000 	str.w	r7, [r8]
 8004b12:	e00f      	b.n	8004b34 <_malloc_r+0xa8>
 8004b14:	6822      	ldr	r2, [r4, #0]
 8004b16:	1b52      	subs	r2, r2, r5
 8004b18:	d420      	bmi.n	8004b5c <_malloc_r+0xd0>
 8004b1a:	2a0b      	cmp	r2, #11
 8004b1c:	d917      	bls.n	8004b4e <_malloc_r+0xc2>
 8004b1e:	1961      	adds	r1, r4, r5
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	6025      	str	r5, [r4, #0]
 8004b24:	bf18      	it	ne
 8004b26:	6059      	strne	r1, [r3, #4]
 8004b28:	6863      	ldr	r3, [r4, #4]
 8004b2a:	bf08      	it	eq
 8004b2c:	f8c8 1000 	streq.w	r1, [r8]
 8004b30:	5162      	str	r2, [r4, r5]
 8004b32:	604b      	str	r3, [r1, #4]
 8004b34:	4630      	mov	r0, r6
 8004b36:	f000 f82f 	bl	8004b98 <__malloc_unlock>
 8004b3a:	f104 000b 	add.w	r0, r4, #11
 8004b3e:	1d23      	adds	r3, r4, #4
 8004b40:	f020 0007 	bic.w	r0, r0, #7
 8004b44:	1ac2      	subs	r2, r0, r3
 8004b46:	bf1c      	itt	ne
 8004b48:	1a1b      	subne	r3, r3, r0
 8004b4a:	50a3      	strne	r3, [r4, r2]
 8004b4c:	e7af      	b.n	8004aae <_malloc_r+0x22>
 8004b4e:	6862      	ldr	r2, [r4, #4]
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	bf0c      	ite	eq
 8004b54:	f8c8 2000 	streq.w	r2, [r8]
 8004b58:	605a      	strne	r2, [r3, #4]
 8004b5a:	e7eb      	b.n	8004b34 <_malloc_r+0xa8>
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	6864      	ldr	r4, [r4, #4]
 8004b60:	e7ae      	b.n	8004ac0 <_malloc_r+0x34>
 8004b62:	463c      	mov	r4, r7
 8004b64:	687f      	ldr	r7, [r7, #4]
 8004b66:	e7b6      	b.n	8004ad6 <_malloc_r+0x4a>
 8004b68:	461a      	mov	r2, r3
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	d1fb      	bne.n	8004b68 <_malloc_r+0xdc>
 8004b70:	2300      	movs	r3, #0
 8004b72:	6053      	str	r3, [r2, #4]
 8004b74:	e7de      	b.n	8004b34 <_malloc_r+0xa8>
 8004b76:	230c      	movs	r3, #12
 8004b78:	6033      	str	r3, [r6, #0]
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f000 f80c 	bl	8004b98 <__malloc_unlock>
 8004b80:	e794      	b.n	8004aac <_malloc_r+0x20>
 8004b82:	6005      	str	r5, [r0, #0]
 8004b84:	e7d6      	b.n	8004b34 <_malloc_r+0xa8>
 8004b86:	bf00      	nop
 8004b88:	2000030c 	.word	0x2000030c

08004b8c <__malloc_lock>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	@ (8004b94 <__malloc_lock+0x8>)
 8004b8e:	f7ff bf0e 	b.w	80049ae <__retarget_lock_acquire_recursive>
 8004b92:	bf00      	nop
 8004b94:	20000304 	.word	0x20000304

08004b98 <__malloc_unlock>:
 8004b98:	4801      	ldr	r0, [pc, #4]	@ (8004ba0 <__malloc_unlock+0x8>)
 8004b9a:	f7ff bf09 	b.w	80049b0 <__retarget_lock_release_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	20000304 	.word	0x20000304

08004ba4 <__sfputc_r>:
 8004ba4:	6893      	ldr	r3, [r2, #8]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	b410      	push	{r4}
 8004bac:	6093      	str	r3, [r2, #8]
 8004bae:	da08      	bge.n	8004bc2 <__sfputc_r+0x1e>
 8004bb0:	6994      	ldr	r4, [r2, #24]
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	db01      	blt.n	8004bba <__sfputc_r+0x16>
 8004bb6:	290a      	cmp	r1, #10
 8004bb8:	d103      	bne.n	8004bc2 <__sfputc_r+0x1e>
 8004bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bbe:	f000 bb6d 	b.w	800529c <__swbuf_r>
 8004bc2:	6813      	ldr	r3, [r2, #0]
 8004bc4:	1c58      	adds	r0, r3, #1
 8004bc6:	6010      	str	r0, [r2, #0]
 8004bc8:	7019      	strb	r1, [r3, #0]
 8004bca:	4608      	mov	r0, r1
 8004bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <__sfputs_r>:
 8004bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	460f      	mov	r7, r1
 8004bd8:	4614      	mov	r4, r2
 8004bda:	18d5      	adds	r5, r2, r3
 8004bdc:	42ac      	cmp	r4, r5
 8004bde:	d101      	bne.n	8004be4 <__sfputs_r+0x12>
 8004be0:	2000      	movs	r0, #0
 8004be2:	e007      	b.n	8004bf4 <__sfputs_r+0x22>
 8004be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be8:	463a      	mov	r2, r7
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7ff ffda 	bl	8004ba4 <__sfputc_r>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d1f3      	bne.n	8004bdc <__sfputs_r+0xa>
 8004bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bf8 <_vfiprintf_r>:
 8004bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	460d      	mov	r5, r1
 8004bfe:	b09d      	sub	sp, #116	@ 0x74
 8004c00:	4614      	mov	r4, r2
 8004c02:	4698      	mov	r8, r3
 8004c04:	4606      	mov	r6, r0
 8004c06:	b118      	cbz	r0, 8004c10 <_vfiprintf_r+0x18>
 8004c08:	6a03      	ldr	r3, [r0, #32]
 8004c0a:	b90b      	cbnz	r3, 8004c10 <_vfiprintf_r+0x18>
 8004c0c:	f7ff fdca 	bl	80047a4 <__sinit>
 8004c10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c12:	07d9      	lsls	r1, r3, #31
 8004c14:	d405      	bmi.n	8004c22 <_vfiprintf_r+0x2a>
 8004c16:	89ab      	ldrh	r3, [r5, #12]
 8004c18:	059a      	lsls	r2, r3, #22
 8004c1a:	d402      	bmi.n	8004c22 <_vfiprintf_r+0x2a>
 8004c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c1e:	f7ff fec6 	bl	80049ae <__retarget_lock_acquire_recursive>
 8004c22:	89ab      	ldrh	r3, [r5, #12]
 8004c24:	071b      	lsls	r3, r3, #28
 8004c26:	d501      	bpl.n	8004c2c <_vfiprintf_r+0x34>
 8004c28:	692b      	ldr	r3, [r5, #16]
 8004c2a:	b99b      	cbnz	r3, 8004c54 <_vfiprintf_r+0x5c>
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	4630      	mov	r0, r6
 8004c30:	f000 fb72 	bl	8005318 <__swsetup_r>
 8004c34:	b170      	cbz	r0, 8004c54 <_vfiprintf_r+0x5c>
 8004c36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c38:	07dc      	lsls	r4, r3, #31
 8004c3a:	d504      	bpl.n	8004c46 <_vfiprintf_r+0x4e>
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c40:	b01d      	add	sp, #116	@ 0x74
 8004c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c46:	89ab      	ldrh	r3, [r5, #12]
 8004c48:	0598      	lsls	r0, r3, #22
 8004c4a:	d4f7      	bmi.n	8004c3c <_vfiprintf_r+0x44>
 8004c4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c4e:	f7ff feaf 	bl	80049b0 <__retarget_lock_release_recursive>
 8004c52:	e7f3      	b.n	8004c3c <_vfiprintf_r+0x44>
 8004c54:	2300      	movs	r3, #0
 8004c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c58:	2320      	movs	r3, #32
 8004c5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c62:	2330      	movs	r3, #48	@ 0x30
 8004c64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e14 <_vfiprintf_r+0x21c>
 8004c68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c6c:	f04f 0901 	mov.w	r9, #1
 8004c70:	4623      	mov	r3, r4
 8004c72:	469a      	mov	sl, r3
 8004c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c78:	b10a      	cbz	r2, 8004c7e <_vfiprintf_r+0x86>
 8004c7a:	2a25      	cmp	r2, #37	@ 0x25
 8004c7c:	d1f9      	bne.n	8004c72 <_vfiprintf_r+0x7a>
 8004c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8004c82:	d00b      	beq.n	8004c9c <_vfiprintf_r+0xa4>
 8004c84:	465b      	mov	r3, fp
 8004c86:	4622      	mov	r2, r4
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7ff ffa1 	bl	8004bd2 <__sfputs_r>
 8004c90:	3001      	adds	r0, #1
 8004c92:	f000 80a7 	beq.w	8004de4 <_vfiprintf_r+0x1ec>
 8004c96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c98:	445a      	add	r2, fp
 8004c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 809f 	beq.w	8004de4 <_vfiprintf_r+0x1ec>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cb0:	f10a 0a01 	add.w	sl, sl, #1
 8004cb4:	9304      	str	r3, [sp, #16]
 8004cb6:	9307      	str	r3, [sp, #28]
 8004cb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cbe:	4654      	mov	r4, sl
 8004cc0:	2205      	movs	r2, #5
 8004cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc6:	4853      	ldr	r0, [pc, #332]	@ (8004e14 <_vfiprintf_r+0x21c>)
 8004cc8:	f7fb fa8a 	bl	80001e0 <memchr>
 8004ccc:	9a04      	ldr	r2, [sp, #16]
 8004cce:	b9d8      	cbnz	r0, 8004d08 <_vfiprintf_r+0x110>
 8004cd0:	06d1      	lsls	r1, r2, #27
 8004cd2:	bf44      	itt	mi
 8004cd4:	2320      	movmi	r3, #32
 8004cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cda:	0713      	lsls	r3, r2, #28
 8004cdc:	bf44      	itt	mi
 8004cde:	232b      	movmi	r3, #43	@ 0x2b
 8004ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cea:	d015      	beq.n	8004d18 <_vfiprintf_r+0x120>
 8004cec:	9a07      	ldr	r2, [sp, #28]
 8004cee:	4654      	mov	r4, sl
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	f04f 0c0a 	mov.w	ip, #10
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cfc:	3b30      	subs	r3, #48	@ 0x30
 8004cfe:	2b09      	cmp	r3, #9
 8004d00:	d94b      	bls.n	8004d9a <_vfiprintf_r+0x1a2>
 8004d02:	b1b0      	cbz	r0, 8004d32 <_vfiprintf_r+0x13a>
 8004d04:	9207      	str	r2, [sp, #28]
 8004d06:	e014      	b.n	8004d32 <_vfiprintf_r+0x13a>
 8004d08:	eba0 0308 	sub.w	r3, r0, r8
 8004d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004d10:	4313      	orrs	r3, r2
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	46a2      	mov	sl, r4
 8004d16:	e7d2      	b.n	8004cbe <_vfiprintf_r+0xc6>
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	1d19      	adds	r1, r3, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	9103      	str	r1, [sp, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bfbb      	ittet	lt
 8004d24:	425b      	neglt	r3, r3
 8004d26:	f042 0202 	orrlt.w	r2, r2, #2
 8004d2a:	9307      	strge	r3, [sp, #28]
 8004d2c:	9307      	strlt	r3, [sp, #28]
 8004d2e:	bfb8      	it	lt
 8004d30:	9204      	strlt	r2, [sp, #16]
 8004d32:	7823      	ldrb	r3, [r4, #0]
 8004d34:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d36:	d10a      	bne.n	8004d4e <_vfiprintf_r+0x156>
 8004d38:	7863      	ldrb	r3, [r4, #1]
 8004d3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d3c:	d132      	bne.n	8004da4 <_vfiprintf_r+0x1ac>
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	1d1a      	adds	r2, r3, #4
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	9203      	str	r2, [sp, #12]
 8004d46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d4a:	3402      	adds	r4, #2
 8004d4c:	9305      	str	r3, [sp, #20]
 8004d4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e24 <_vfiprintf_r+0x22c>
 8004d52:	7821      	ldrb	r1, [r4, #0]
 8004d54:	2203      	movs	r2, #3
 8004d56:	4650      	mov	r0, sl
 8004d58:	f7fb fa42 	bl	80001e0 <memchr>
 8004d5c:	b138      	cbz	r0, 8004d6e <_vfiprintf_r+0x176>
 8004d5e:	9b04      	ldr	r3, [sp, #16]
 8004d60:	eba0 000a 	sub.w	r0, r0, sl
 8004d64:	2240      	movs	r2, #64	@ 0x40
 8004d66:	4082      	lsls	r2, r0
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	3401      	adds	r4, #1
 8004d6c:	9304      	str	r3, [sp, #16]
 8004d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d72:	4829      	ldr	r0, [pc, #164]	@ (8004e18 <_vfiprintf_r+0x220>)
 8004d74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d78:	2206      	movs	r2, #6
 8004d7a:	f7fb fa31 	bl	80001e0 <memchr>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d03f      	beq.n	8004e02 <_vfiprintf_r+0x20a>
 8004d82:	4b26      	ldr	r3, [pc, #152]	@ (8004e1c <_vfiprintf_r+0x224>)
 8004d84:	bb1b      	cbnz	r3, 8004dce <_vfiprintf_r+0x1d6>
 8004d86:	9b03      	ldr	r3, [sp, #12]
 8004d88:	3307      	adds	r3, #7
 8004d8a:	f023 0307 	bic.w	r3, r3, #7
 8004d8e:	3308      	adds	r3, #8
 8004d90:	9303      	str	r3, [sp, #12]
 8004d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d94:	443b      	add	r3, r7
 8004d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d98:	e76a      	b.n	8004c70 <_vfiprintf_r+0x78>
 8004d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d9e:	460c      	mov	r4, r1
 8004da0:	2001      	movs	r0, #1
 8004da2:	e7a8      	b.n	8004cf6 <_vfiprintf_r+0xfe>
 8004da4:	2300      	movs	r3, #0
 8004da6:	3401      	adds	r4, #1
 8004da8:	9305      	str	r3, [sp, #20]
 8004daa:	4619      	mov	r1, r3
 8004dac:	f04f 0c0a 	mov.w	ip, #10
 8004db0:	4620      	mov	r0, r4
 8004db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004db6:	3a30      	subs	r2, #48	@ 0x30
 8004db8:	2a09      	cmp	r2, #9
 8004dba:	d903      	bls.n	8004dc4 <_vfiprintf_r+0x1cc>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0c6      	beq.n	8004d4e <_vfiprintf_r+0x156>
 8004dc0:	9105      	str	r1, [sp, #20]
 8004dc2:	e7c4      	b.n	8004d4e <_vfiprintf_r+0x156>
 8004dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dc8:	4604      	mov	r4, r0
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e7f0      	b.n	8004db0 <_vfiprintf_r+0x1b8>
 8004dce:	ab03      	add	r3, sp, #12
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	462a      	mov	r2, r5
 8004dd4:	4b12      	ldr	r3, [pc, #72]	@ (8004e20 <_vfiprintf_r+0x228>)
 8004dd6:	a904      	add	r1, sp, #16
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f3af 8000 	nop.w
 8004dde:	4607      	mov	r7, r0
 8004de0:	1c78      	adds	r0, r7, #1
 8004de2:	d1d6      	bne.n	8004d92 <_vfiprintf_r+0x19a>
 8004de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004de6:	07d9      	lsls	r1, r3, #31
 8004de8:	d405      	bmi.n	8004df6 <_vfiprintf_r+0x1fe>
 8004dea:	89ab      	ldrh	r3, [r5, #12]
 8004dec:	059a      	lsls	r2, r3, #22
 8004dee:	d402      	bmi.n	8004df6 <_vfiprintf_r+0x1fe>
 8004df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004df2:	f7ff fddd 	bl	80049b0 <__retarget_lock_release_recursive>
 8004df6:	89ab      	ldrh	r3, [r5, #12]
 8004df8:	065b      	lsls	r3, r3, #25
 8004dfa:	f53f af1f 	bmi.w	8004c3c <_vfiprintf_r+0x44>
 8004dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e00:	e71e      	b.n	8004c40 <_vfiprintf_r+0x48>
 8004e02:	ab03      	add	r3, sp, #12
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	462a      	mov	r2, r5
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <_vfiprintf_r+0x228>)
 8004e0a:	a904      	add	r1, sp, #16
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f000 f879 	bl	8004f04 <_printf_i>
 8004e12:	e7e4      	b.n	8004dde <_vfiprintf_r+0x1e6>
 8004e14:	08005574 	.word	0x08005574
 8004e18:	0800557e 	.word	0x0800557e
 8004e1c:	00000000 	.word	0x00000000
 8004e20:	08004bd3 	.word	0x08004bd3
 8004e24:	0800557a 	.word	0x0800557a

08004e28 <_printf_common>:
 8004e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2c:	4616      	mov	r6, r2
 8004e2e:	4698      	mov	r8, r3
 8004e30:	688a      	ldr	r2, [r1, #8]
 8004e32:	690b      	ldr	r3, [r1, #16]
 8004e34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	bfb8      	it	lt
 8004e3c:	4613      	movlt	r3, r2
 8004e3e:	6033      	str	r3, [r6, #0]
 8004e40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e44:	4607      	mov	r7, r0
 8004e46:	460c      	mov	r4, r1
 8004e48:	b10a      	cbz	r2, 8004e4e <_printf_common+0x26>
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	6033      	str	r3, [r6, #0]
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	0699      	lsls	r1, r3, #26
 8004e52:	bf42      	ittt	mi
 8004e54:	6833      	ldrmi	r3, [r6, #0]
 8004e56:	3302      	addmi	r3, #2
 8004e58:	6033      	strmi	r3, [r6, #0]
 8004e5a:	6825      	ldr	r5, [r4, #0]
 8004e5c:	f015 0506 	ands.w	r5, r5, #6
 8004e60:	d106      	bne.n	8004e70 <_printf_common+0x48>
 8004e62:	f104 0a19 	add.w	sl, r4, #25
 8004e66:	68e3      	ldr	r3, [r4, #12]
 8004e68:	6832      	ldr	r2, [r6, #0]
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	42ab      	cmp	r3, r5
 8004e6e:	dc26      	bgt.n	8004ebe <_printf_common+0x96>
 8004e70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e74:	6822      	ldr	r2, [r4, #0]
 8004e76:	3b00      	subs	r3, #0
 8004e78:	bf18      	it	ne
 8004e7a:	2301      	movne	r3, #1
 8004e7c:	0692      	lsls	r2, r2, #26
 8004e7e:	d42b      	bmi.n	8004ed8 <_printf_common+0xb0>
 8004e80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e84:	4641      	mov	r1, r8
 8004e86:	4638      	mov	r0, r7
 8004e88:	47c8      	blx	r9
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d01e      	beq.n	8004ecc <_printf_common+0xa4>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	6922      	ldr	r2, [r4, #16]
 8004e92:	f003 0306 	and.w	r3, r3, #6
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	bf02      	ittt	eq
 8004e9a:	68e5      	ldreq	r5, [r4, #12]
 8004e9c:	6833      	ldreq	r3, [r6, #0]
 8004e9e:	1aed      	subeq	r5, r5, r3
 8004ea0:	68a3      	ldr	r3, [r4, #8]
 8004ea2:	bf0c      	ite	eq
 8004ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ea8:	2500      	movne	r5, #0
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	bfc4      	itt	gt
 8004eae:	1a9b      	subgt	r3, r3, r2
 8004eb0:	18ed      	addgt	r5, r5, r3
 8004eb2:	2600      	movs	r6, #0
 8004eb4:	341a      	adds	r4, #26
 8004eb6:	42b5      	cmp	r5, r6
 8004eb8:	d11a      	bne.n	8004ef0 <_printf_common+0xc8>
 8004eba:	2000      	movs	r0, #0
 8004ebc:	e008      	b.n	8004ed0 <_printf_common+0xa8>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	4652      	mov	r2, sl
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	47c8      	blx	r9
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d103      	bne.n	8004ed4 <_printf_common+0xac>
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed4:	3501      	adds	r5, #1
 8004ed6:	e7c6      	b.n	8004e66 <_printf_common+0x3e>
 8004ed8:	18e1      	adds	r1, r4, r3
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	2030      	movs	r0, #48	@ 0x30
 8004ede:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ee2:	4422      	add	r2, r4
 8004ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ee8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004eec:	3302      	adds	r3, #2
 8004eee:	e7c7      	b.n	8004e80 <_printf_common+0x58>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	47c8      	blx	r9
 8004efa:	3001      	adds	r0, #1
 8004efc:	d0e6      	beq.n	8004ecc <_printf_common+0xa4>
 8004efe:	3601      	adds	r6, #1
 8004f00:	e7d9      	b.n	8004eb6 <_printf_common+0x8e>
	...

08004f04 <_printf_i>:
 8004f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f08:	7e0f      	ldrb	r7, [r1, #24]
 8004f0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f0c:	2f78      	cmp	r7, #120	@ 0x78
 8004f0e:	4691      	mov	r9, r2
 8004f10:	4680      	mov	r8, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	469a      	mov	sl, r3
 8004f16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f1a:	d807      	bhi.n	8004f2c <_printf_i+0x28>
 8004f1c:	2f62      	cmp	r7, #98	@ 0x62
 8004f1e:	d80a      	bhi.n	8004f36 <_printf_i+0x32>
 8004f20:	2f00      	cmp	r7, #0
 8004f22:	f000 80d2 	beq.w	80050ca <_printf_i+0x1c6>
 8004f26:	2f58      	cmp	r7, #88	@ 0x58
 8004f28:	f000 80b9 	beq.w	800509e <_printf_i+0x19a>
 8004f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f34:	e03a      	b.n	8004fac <_printf_i+0xa8>
 8004f36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f3a:	2b15      	cmp	r3, #21
 8004f3c:	d8f6      	bhi.n	8004f2c <_printf_i+0x28>
 8004f3e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f44 <_printf_i+0x40>)
 8004f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f44:	08004f9d 	.word	0x08004f9d
 8004f48:	08004fb1 	.word	0x08004fb1
 8004f4c:	08004f2d 	.word	0x08004f2d
 8004f50:	08004f2d 	.word	0x08004f2d
 8004f54:	08004f2d 	.word	0x08004f2d
 8004f58:	08004f2d 	.word	0x08004f2d
 8004f5c:	08004fb1 	.word	0x08004fb1
 8004f60:	08004f2d 	.word	0x08004f2d
 8004f64:	08004f2d 	.word	0x08004f2d
 8004f68:	08004f2d 	.word	0x08004f2d
 8004f6c:	08004f2d 	.word	0x08004f2d
 8004f70:	080050b1 	.word	0x080050b1
 8004f74:	08004fdb 	.word	0x08004fdb
 8004f78:	0800506b 	.word	0x0800506b
 8004f7c:	08004f2d 	.word	0x08004f2d
 8004f80:	08004f2d 	.word	0x08004f2d
 8004f84:	080050d3 	.word	0x080050d3
 8004f88:	08004f2d 	.word	0x08004f2d
 8004f8c:	08004fdb 	.word	0x08004fdb
 8004f90:	08004f2d 	.word	0x08004f2d
 8004f94:	08004f2d 	.word	0x08004f2d
 8004f98:	08005073 	.word	0x08005073
 8004f9c:	6833      	ldr	r3, [r6, #0]
 8004f9e:	1d1a      	adds	r2, r3, #4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6032      	str	r2, [r6, #0]
 8004fa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fac:	2301      	movs	r3, #1
 8004fae:	e09d      	b.n	80050ec <_printf_i+0x1e8>
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	6820      	ldr	r0, [r4, #0]
 8004fb4:	1d19      	adds	r1, r3, #4
 8004fb6:	6031      	str	r1, [r6, #0]
 8004fb8:	0606      	lsls	r6, r0, #24
 8004fba:	d501      	bpl.n	8004fc0 <_printf_i+0xbc>
 8004fbc:	681d      	ldr	r5, [r3, #0]
 8004fbe:	e003      	b.n	8004fc8 <_printf_i+0xc4>
 8004fc0:	0645      	lsls	r5, r0, #25
 8004fc2:	d5fb      	bpl.n	8004fbc <_printf_i+0xb8>
 8004fc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fc8:	2d00      	cmp	r5, #0
 8004fca:	da03      	bge.n	8004fd4 <_printf_i+0xd0>
 8004fcc:	232d      	movs	r3, #45	@ 0x2d
 8004fce:	426d      	negs	r5, r5
 8004fd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fd4:	4859      	ldr	r0, [pc, #356]	@ (800513c <_printf_i+0x238>)
 8004fd6:	230a      	movs	r3, #10
 8004fd8:	e011      	b.n	8004ffe <_printf_i+0xfa>
 8004fda:	6821      	ldr	r1, [r4, #0]
 8004fdc:	6833      	ldr	r3, [r6, #0]
 8004fde:	0608      	lsls	r0, r1, #24
 8004fe0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fe4:	d402      	bmi.n	8004fec <_printf_i+0xe8>
 8004fe6:	0649      	lsls	r1, r1, #25
 8004fe8:	bf48      	it	mi
 8004fea:	b2ad      	uxthmi	r5, r5
 8004fec:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fee:	4853      	ldr	r0, [pc, #332]	@ (800513c <_printf_i+0x238>)
 8004ff0:	6033      	str	r3, [r6, #0]
 8004ff2:	bf14      	ite	ne
 8004ff4:	230a      	movne	r3, #10
 8004ff6:	2308      	moveq	r3, #8
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ffe:	6866      	ldr	r6, [r4, #4]
 8005000:	60a6      	str	r6, [r4, #8]
 8005002:	2e00      	cmp	r6, #0
 8005004:	bfa2      	ittt	ge
 8005006:	6821      	ldrge	r1, [r4, #0]
 8005008:	f021 0104 	bicge.w	r1, r1, #4
 800500c:	6021      	strge	r1, [r4, #0]
 800500e:	b90d      	cbnz	r5, 8005014 <_printf_i+0x110>
 8005010:	2e00      	cmp	r6, #0
 8005012:	d04b      	beq.n	80050ac <_printf_i+0x1a8>
 8005014:	4616      	mov	r6, r2
 8005016:	fbb5 f1f3 	udiv	r1, r5, r3
 800501a:	fb03 5711 	mls	r7, r3, r1, r5
 800501e:	5dc7      	ldrb	r7, [r0, r7]
 8005020:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005024:	462f      	mov	r7, r5
 8005026:	42bb      	cmp	r3, r7
 8005028:	460d      	mov	r5, r1
 800502a:	d9f4      	bls.n	8005016 <_printf_i+0x112>
 800502c:	2b08      	cmp	r3, #8
 800502e:	d10b      	bne.n	8005048 <_printf_i+0x144>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	07df      	lsls	r7, r3, #31
 8005034:	d508      	bpl.n	8005048 <_printf_i+0x144>
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	6861      	ldr	r1, [r4, #4]
 800503a:	4299      	cmp	r1, r3
 800503c:	bfde      	ittt	le
 800503e:	2330      	movle	r3, #48	@ 0x30
 8005040:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005044:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005048:	1b92      	subs	r2, r2, r6
 800504a:	6122      	str	r2, [r4, #16]
 800504c:	f8cd a000 	str.w	sl, [sp]
 8005050:	464b      	mov	r3, r9
 8005052:	aa03      	add	r2, sp, #12
 8005054:	4621      	mov	r1, r4
 8005056:	4640      	mov	r0, r8
 8005058:	f7ff fee6 	bl	8004e28 <_printf_common>
 800505c:	3001      	adds	r0, #1
 800505e:	d14a      	bne.n	80050f6 <_printf_i+0x1f2>
 8005060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005064:	b004      	add	sp, #16
 8005066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f043 0320 	orr.w	r3, r3, #32
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	4833      	ldr	r0, [pc, #204]	@ (8005140 <_printf_i+0x23c>)
 8005074:	2778      	movs	r7, #120	@ 0x78
 8005076:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	6831      	ldr	r1, [r6, #0]
 800507e:	061f      	lsls	r7, r3, #24
 8005080:	f851 5b04 	ldr.w	r5, [r1], #4
 8005084:	d402      	bmi.n	800508c <_printf_i+0x188>
 8005086:	065f      	lsls	r7, r3, #25
 8005088:	bf48      	it	mi
 800508a:	b2ad      	uxthmi	r5, r5
 800508c:	6031      	str	r1, [r6, #0]
 800508e:	07d9      	lsls	r1, r3, #31
 8005090:	bf44      	itt	mi
 8005092:	f043 0320 	orrmi.w	r3, r3, #32
 8005096:	6023      	strmi	r3, [r4, #0]
 8005098:	b11d      	cbz	r5, 80050a2 <_printf_i+0x19e>
 800509a:	2310      	movs	r3, #16
 800509c:	e7ac      	b.n	8004ff8 <_printf_i+0xf4>
 800509e:	4827      	ldr	r0, [pc, #156]	@ (800513c <_printf_i+0x238>)
 80050a0:	e7e9      	b.n	8005076 <_printf_i+0x172>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	f023 0320 	bic.w	r3, r3, #32
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	e7f6      	b.n	800509a <_printf_i+0x196>
 80050ac:	4616      	mov	r6, r2
 80050ae:	e7bd      	b.n	800502c <_printf_i+0x128>
 80050b0:	6833      	ldr	r3, [r6, #0]
 80050b2:	6825      	ldr	r5, [r4, #0]
 80050b4:	6961      	ldr	r1, [r4, #20]
 80050b6:	1d18      	adds	r0, r3, #4
 80050b8:	6030      	str	r0, [r6, #0]
 80050ba:	062e      	lsls	r6, r5, #24
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	d501      	bpl.n	80050c4 <_printf_i+0x1c0>
 80050c0:	6019      	str	r1, [r3, #0]
 80050c2:	e002      	b.n	80050ca <_printf_i+0x1c6>
 80050c4:	0668      	lsls	r0, r5, #25
 80050c6:	d5fb      	bpl.n	80050c0 <_printf_i+0x1bc>
 80050c8:	8019      	strh	r1, [r3, #0]
 80050ca:	2300      	movs	r3, #0
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	4616      	mov	r6, r2
 80050d0:	e7bc      	b.n	800504c <_printf_i+0x148>
 80050d2:	6833      	ldr	r3, [r6, #0]
 80050d4:	1d1a      	adds	r2, r3, #4
 80050d6:	6032      	str	r2, [r6, #0]
 80050d8:	681e      	ldr	r6, [r3, #0]
 80050da:	6862      	ldr	r2, [r4, #4]
 80050dc:	2100      	movs	r1, #0
 80050de:	4630      	mov	r0, r6
 80050e0:	f7fb f87e 	bl	80001e0 <memchr>
 80050e4:	b108      	cbz	r0, 80050ea <_printf_i+0x1e6>
 80050e6:	1b80      	subs	r0, r0, r6
 80050e8:	6060      	str	r0, [r4, #4]
 80050ea:	6863      	ldr	r3, [r4, #4]
 80050ec:	6123      	str	r3, [r4, #16]
 80050ee:	2300      	movs	r3, #0
 80050f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050f4:	e7aa      	b.n	800504c <_printf_i+0x148>
 80050f6:	6923      	ldr	r3, [r4, #16]
 80050f8:	4632      	mov	r2, r6
 80050fa:	4649      	mov	r1, r9
 80050fc:	4640      	mov	r0, r8
 80050fe:	47d0      	blx	sl
 8005100:	3001      	adds	r0, #1
 8005102:	d0ad      	beq.n	8005060 <_printf_i+0x15c>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	079b      	lsls	r3, r3, #30
 8005108:	d413      	bmi.n	8005132 <_printf_i+0x22e>
 800510a:	68e0      	ldr	r0, [r4, #12]
 800510c:	9b03      	ldr	r3, [sp, #12]
 800510e:	4298      	cmp	r0, r3
 8005110:	bfb8      	it	lt
 8005112:	4618      	movlt	r0, r3
 8005114:	e7a6      	b.n	8005064 <_printf_i+0x160>
 8005116:	2301      	movs	r3, #1
 8005118:	4632      	mov	r2, r6
 800511a:	4649      	mov	r1, r9
 800511c:	4640      	mov	r0, r8
 800511e:	47d0      	blx	sl
 8005120:	3001      	adds	r0, #1
 8005122:	d09d      	beq.n	8005060 <_printf_i+0x15c>
 8005124:	3501      	adds	r5, #1
 8005126:	68e3      	ldr	r3, [r4, #12]
 8005128:	9903      	ldr	r1, [sp, #12]
 800512a:	1a5b      	subs	r3, r3, r1
 800512c:	42ab      	cmp	r3, r5
 800512e:	dcf2      	bgt.n	8005116 <_printf_i+0x212>
 8005130:	e7eb      	b.n	800510a <_printf_i+0x206>
 8005132:	2500      	movs	r5, #0
 8005134:	f104 0619 	add.w	r6, r4, #25
 8005138:	e7f5      	b.n	8005126 <_printf_i+0x222>
 800513a:	bf00      	nop
 800513c:	08005585 	.word	0x08005585
 8005140:	08005596 	.word	0x08005596

08005144 <__sflush_r>:
 8005144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800514c:	0716      	lsls	r6, r2, #28
 800514e:	4605      	mov	r5, r0
 8005150:	460c      	mov	r4, r1
 8005152:	d454      	bmi.n	80051fe <__sflush_r+0xba>
 8005154:	684b      	ldr	r3, [r1, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	dc02      	bgt.n	8005160 <__sflush_r+0x1c>
 800515a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	dd48      	ble.n	80051f2 <__sflush_r+0xae>
 8005160:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005162:	2e00      	cmp	r6, #0
 8005164:	d045      	beq.n	80051f2 <__sflush_r+0xae>
 8005166:	2300      	movs	r3, #0
 8005168:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800516c:	682f      	ldr	r7, [r5, #0]
 800516e:	6a21      	ldr	r1, [r4, #32]
 8005170:	602b      	str	r3, [r5, #0]
 8005172:	d030      	beq.n	80051d6 <__sflush_r+0x92>
 8005174:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	0759      	lsls	r1, r3, #29
 800517a:	d505      	bpl.n	8005188 <__sflush_r+0x44>
 800517c:	6863      	ldr	r3, [r4, #4]
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005182:	b10b      	cbz	r3, 8005188 <__sflush_r+0x44>
 8005184:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005186:	1ad2      	subs	r2, r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800518c:	6a21      	ldr	r1, [r4, #32]
 800518e:	4628      	mov	r0, r5
 8005190:	47b0      	blx	r6
 8005192:	1c43      	adds	r3, r0, #1
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	d106      	bne.n	80051a6 <__sflush_r+0x62>
 8005198:	6829      	ldr	r1, [r5, #0]
 800519a:	291d      	cmp	r1, #29
 800519c:	d82b      	bhi.n	80051f6 <__sflush_r+0xb2>
 800519e:	4a2a      	ldr	r2, [pc, #168]	@ (8005248 <__sflush_r+0x104>)
 80051a0:	410a      	asrs	r2, r1
 80051a2:	07d6      	lsls	r6, r2, #31
 80051a4:	d427      	bmi.n	80051f6 <__sflush_r+0xb2>
 80051a6:	2200      	movs	r2, #0
 80051a8:	6062      	str	r2, [r4, #4]
 80051aa:	04d9      	lsls	r1, r3, #19
 80051ac:	6922      	ldr	r2, [r4, #16]
 80051ae:	6022      	str	r2, [r4, #0]
 80051b0:	d504      	bpl.n	80051bc <__sflush_r+0x78>
 80051b2:	1c42      	adds	r2, r0, #1
 80051b4:	d101      	bne.n	80051ba <__sflush_r+0x76>
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	b903      	cbnz	r3, 80051bc <__sflush_r+0x78>
 80051ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80051bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051be:	602f      	str	r7, [r5, #0]
 80051c0:	b1b9      	cbz	r1, 80051f2 <__sflush_r+0xae>
 80051c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051c6:	4299      	cmp	r1, r3
 80051c8:	d002      	beq.n	80051d0 <__sflush_r+0x8c>
 80051ca:	4628      	mov	r0, r5
 80051cc:	f7ff fbf2 	bl	80049b4 <_free_r>
 80051d0:	2300      	movs	r3, #0
 80051d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80051d4:	e00d      	b.n	80051f2 <__sflush_r+0xae>
 80051d6:	2301      	movs	r3, #1
 80051d8:	4628      	mov	r0, r5
 80051da:	47b0      	blx	r6
 80051dc:	4602      	mov	r2, r0
 80051de:	1c50      	adds	r0, r2, #1
 80051e0:	d1c9      	bne.n	8005176 <__sflush_r+0x32>
 80051e2:	682b      	ldr	r3, [r5, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0c6      	beq.n	8005176 <__sflush_r+0x32>
 80051e8:	2b1d      	cmp	r3, #29
 80051ea:	d001      	beq.n	80051f0 <__sflush_r+0xac>
 80051ec:	2b16      	cmp	r3, #22
 80051ee:	d11e      	bne.n	800522e <__sflush_r+0xea>
 80051f0:	602f      	str	r7, [r5, #0]
 80051f2:	2000      	movs	r0, #0
 80051f4:	e022      	b.n	800523c <__sflush_r+0xf8>
 80051f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051fa:	b21b      	sxth	r3, r3
 80051fc:	e01b      	b.n	8005236 <__sflush_r+0xf2>
 80051fe:	690f      	ldr	r7, [r1, #16]
 8005200:	2f00      	cmp	r7, #0
 8005202:	d0f6      	beq.n	80051f2 <__sflush_r+0xae>
 8005204:	0793      	lsls	r3, r2, #30
 8005206:	680e      	ldr	r6, [r1, #0]
 8005208:	bf08      	it	eq
 800520a:	694b      	ldreq	r3, [r1, #20]
 800520c:	600f      	str	r7, [r1, #0]
 800520e:	bf18      	it	ne
 8005210:	2300      	movne	r3, #0
 8005212:	eba6 0807 	sub.w	r8, r6, r7
 8005216:	608b      	str	r3, [r1, #8]
 8005218:	f1b8 0f00 	cmp.w	r8, #0
 800521c:	dde9      	ble.n	80051f2 <__sflush_r+0xae>
 800521e:	6a21      	ldr	r1, [r4, #32]
 8005220:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005222:	4643      	mov	r3, r8
 8005224:	463a      	mov	r2, r7
 8005226:	4628      	mov	r0, r5
 8005228:	47b0      	blx	r6
 800522a:	2800      	cmp	r0, #0
 800522c:	dc08      	bgt.n	8005240 <__sflush_r+0xfc>
 800522e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005236:	81a3      	strh	r3, [r4, #12]
 8005238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800523c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005240:	4407      	add	r7, r0
 8005242:	eba8 0800 	sub.w	r8, r8, r0
 8005246:	e7e7      	b.n	8005218 <__sflush_r+0xd4>
 8005248:	dfbffffe 	.word	0xdfbffffe

0800524c <_fflush_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	690b      	ldr	r3, [r1, #16]
 8005250:	4605      	mov	r5, r0
 8005252:	460c      	mov	r4, r1
 8005254:	b913      	cbnz	r3, 800525c <_fflush_r+0x10>
 8005256:	2500      	movs	r5, #0
 8005258:	4628      	mov	r0, r5
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	b118      	cbz	r0, 8005266 <_fflush_r+0x1a>
 800525e:	6a03      	ldr	r3, [r0, #32]
 8005260:	b90b      	cbnz	r3, 8005266 <_fflush_r+0x1a>
 8005262:	f7ff fa9f 	bl	80047a4 <__sinit>
 8005266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f3      	beq.n	8005256 <_fflush_r+0xa>
 800526e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005270:	07d0      	lsls	r0, r2, #31
 8005272:	d404      	bmi.n	800527e <_fflush_r+0x32>
 8005274:	0599      	lsls	r1, r3, #22
 8005276:	d402      	bmi.n	800527e <_fflush_r+0x32>
 8005278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800527a:	f7ff fb98 	bl	80049ae <__retarget_lock_acquire_recursive>
 800527e:	4628      	mov	r0, r5
 8005280:	4621      	mov	r1, r4
 8005282:	f7ff ff5f 	bl	8005144 <__sflush_r>
 8005286:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005288:	07da      	lsls	r2, r3, #31
 800528a:	4605      	mov	r5, r0
 800528c:	d4e4      	bmi.n	8005258 <_fflush_r+0xc>
 800528e:	89a3      	ldrh	r3, [r4, #12]
 8005290:	059b      	lsls	r3, r3, #22
 8005292:	d4e1      	bmi.n	8005258 <_fflush_r+0xc>
 8005294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005296:	f7ff fb8b 	bl	80049b0 <__retarget_lock_release_recursive>
 800529a:	e7dd      	b.n	8005258 <_fflush_r+0xc>

0800529c <__swbuf_r>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	460e      	mov	r6, r1
 80052a0:	4614      	mov	r4, r2
 80052a2:	4605      	mov	r5, r0
 80052a4:	b118      	cbz	r0, 80052ae <__swbuf_r+0x12>
 80052a6:	6a03      	ldr	r3, [r0, #32]
 80052a8:	b90b      	cbnz	r3, 80052ae <__swbuf_r+0x12>
 80052aa:	f7ff fa7b 	bl	80047a4 <__sinit>
 80052ae:	69a3      	ldr	r3, [r4, #24]
 80052b0:	60a3      	str	r3, [r4, #8]
 80052b2:	89a3      	ldrh	r3, [r4, #12]
 80052b4:	071a      	lsls	r2, r3, #28
 80052b6:	d501      	bpl.n	80052bc <__swbuf_r+0x20>
 80052b8:	6923      	ldr	r3, [r4, #16]
 80052ba:	b943      	cbnz	r3, 80052ce <__swbuf_r+0x32>
 80052bc:	4621      	mov	r1, r4
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 f82a 	bl	8005318 <__swsetup_r>
 80052c4:	b118      	cbz	r0, 80052ce <__swbuf_r+0x32>
 80052c6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80052ca:	4638      	mov	r0, r7
 80052cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	6922      	ldr	r2, [r4, #16]
 80052d2:	1a98      	subs	r0, r3, r2
 80052d4:	6963      	ldr	r3, [r4, #20]
 80052d6:	b2f6      	uxtb	r6, r6
 80052d8:	4283      	cmp	r3, r0
 80052da:	4637      	mov	r7, r6
 80052dc:	dc05      	bgt.n	80052ea <__swbuf_r+0x4e>
 80052de:	4621      	mov	r1, r4
 80052e0:	4628      	mov	r0, r5
 80052e2:	f7ff ffb3 	bl	800524c <_fflush_r>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d1ed      	bne.n	80052c6 <__swbuf_r+0x2a>
 80052ea:	68a3      	ldr	r3, [r4, #8]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	60a3      	str	r3, [r4, #8]
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	6022      	str	r2, [r4, #0]
 80052f6:	701e      	strb	r6, [r3, #0]
 80052f8:	6962      	ldr	r2, [r4, #20]
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d004      	beq.n	800530a <__swbuf_r+0x6e>
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	07db      	lsls	r3, r3, #31
 8005304:	d5e1      	bpl.n	80052ca <__swbuf_r+0x2e>
 8005306:	2e0a      	cmp	r6, #10
 8005308:	d1df      	bne.n	80052ca <__swbuf_r+0x2e>
 800530a:	4621      	mov	r1, r4
 800530c:	4628      	mov	r0, r5
 800530e:	f7ff ff9d 	bl	800524c <_fflush_r>
 8005312:	2800      	cmp	r0, #0
 8005314:	d0d9      	beq.n	80052ca <__swbuf_r+0x2e>
 8005316:	e7d6      	b.n	80052c6 <__swbuf_r+0x2a>

08005318 <__swsetup_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4b29      	ldr	r3, [pc, #164]	@ (80053c0 <__swsetup_r+0xa8>)
 800531c:	4605      	mov	r5, r0
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	460c      	mov	r4, r1
 8005322:	b118      	cbz	r0, 800532c <__swsetup_r+0x14>
 8005324:	6a03      	ldr	r3, [r0, #32]
 8005326:	b90b      	cbnz	r3, 800532c <__swsetup_r+0x14>
 8005328:	f7ff fa3c 	bl	80047a4 <__sinit>
 800532c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005330:	0719      	lsls	r1, r3, #28
 8005332:	d422      	bmi.n	800537a <__swsetup_r+0x62>
 8005334:	06da      	lsls	r2, r3, #27
 8005336:	d407      	bmi.n	8005348 <__swsetup_r+0x30>
 8005338:	2209      	movs	r2, #9
 800533a:	602a      	str	r2, [r5, #0]
 800533c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005340:	81a3      	strh	r3, [r4, #12]
 8005342:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005346:	e033      	b.n	80053b0 <__swsetup_r+0x98>
 8005348:	0758      	lsls	r0, r3, #29
 800534a:	d512      	bpl.n	8005372 <__swsetup_r+0x5a>
 800534c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800534e:	b141      	cbz	r1, 8005362 <__swsetup_r+0x4a>
 8005350:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005354:	4299      	cmp	r1, r3
 8005356:	d002      	beq.n	800535e <__swsetup_r+0x46>
 8005358:	4628      	mov	r0, r5
 800535a:	f7ff fb2b 	bl	80049b4 <_free_r>
 800535e:	2300      	movs	r3, #0
 8005360:	6363      	str	r3, [r4, #52]	@ 0x34
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005368:	81a3      	strh	r3, [r4, #12]
 800536a:	2300      	movs	r3, #0
 800536c:	6063      	str	r3, [r4, #4]
 800536e:	6923      	ldr	r3, [r4, #16]
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	f043 0308 	orr.w	r3, r3, #8
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	6923      	ldr	r3, [r4, #16]
 800537c:	b94b      	cbnz	r3, 8005392 <__swsetup_r+0x7a>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005388:	d003      	beq.n	8005392 <__swsetup_r+0x7a>
 800538a:	4621      	mov	r1, r4
 800538c:	4628      	mov	r0, r5
 800538e:	f000 f84f 	bl	8005430 <__smakebuf_r>
 8005392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005396:	f013 0201 	ands.w	r2, r3, #1
 800539a:	d00a      	beq.n	80053b2 <__swsetup_r+0x9a>
 800539c:	2200      	movs	r2, #0
 800539e:	60a2      	str	r2, [r4, #8]
 80053a0:	6962      	ldr	r2, [r4, #20]
 80053a2:	4252      	negs	r2, r2
 80053a4:	61a2      	str	r2, [r4, #24]
 80053a6:	6922      	ldr	r2, [r4, #16]
 80053a8:	b942      	cbnz	r2, 80053bc <__swsetup_r+0xa4>
 80053aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053ae:	d1c5      	bne.n	800533c <__swsetup_r+0x24>
 80053b0:	bd38      	pop	{r3, r4, r5, pc}
 80053b2:	0799      	lsls	r1, r3, #30
 80053b4:	bf58      	it	pl
 80053b6:	6962      	ldrpl	r2, [r4, #20]
 80053b8:	60a2      	str	r2, [r4, #8]
 80053ba:	e7f4      	b.n	80053a6 <__swsetup_r+0x8e>
 80053bc:	2000      	movs	r0, #0
 80053be:	e7f7      	b.n	80053b0 <__swsetup_r+0x98>
 80053c0:	20000018 	.word	0x20000018

080053c4 <_sbrk_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d06      	ldr	r5, [pc, #24]	@ (80053e0 <_sbrk_r+0x1c>)
 80053c8:	2300      	movs	r3, #0
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	f7fb fc14 	bl	8000bfc <_sbrk>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_sbrk_r+0x1a>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_sbrk_r+0x1a>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000300 	.word	0x20000300

080053e4 <__swhatbuf_r>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	460c      	mov	r4, r1
 80053e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ec:	2900      	cmp	r1, #0
 80053ee:	b096      	sub	sp, #88	@ 0x58
 80053f0:	4615      	mov	r5, r2
 80053f2:	461e      	mov	r6, r3
 80053f4:	da0d      	bge.n	8005412 <__swhatbuf_r+0x2e>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053fc:	f04f 0100 	mov.w	r1, #0
 8005400:	bf14      	ite	ne
 8005402:	2340      	movne	r3, #64	@ 0x40
 8005404:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005408:	2000      	movs	r0, #0
 800540a:	6031      	str	r1, [r6, #0]
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	b016      	add	sp, #88	@ 0x58
 8005410:	bd70      	pop	{r4, r5, r6, pc}
 8005412:	466a      	mov	r2, sp
 8005414:	f000 f848 	bl	80054a8 <_fstat_r>
 8005418:	2800      	cmp	r0, #0
 800541a:	dbec      	blt.n	80053f6 <__swhatbuf_r+0x12>
 800541c:	9901      	ldr	r1, [sp, #4]
 800541e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005422:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005426:	4259      	negs	r1, r3
 8005428:	4159      	adcs	r1, r3
 800542a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800542e:	e7eb      	b.n	8005408 <__swhatbuf_r+0x24>

08005430 <__smakebuf_r>:
 8005430:	898b      	ldrh	r3, [r1, #12]
 8005432:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005434:	079d      	lsls	r5, r3, #30
 8005436:	4606      	mov	r6, r0
 8005438:	460c      	mov	r4, r1
 800543a:	d507      	bpl.n	800544c <__smakebuf_r+0x1c>
 800543c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	2301      	movs	r3, #1
 8005446:	6163      	str	r3, [r4, #20]
 8005448:	b003      	add	sp, #12
 800544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544c:	ab01      	add	r3, sp, #4
 800544e:	466a      	mov	r2, sp
 8005450:	f7ff ffc8 	bl	80053e4 <__swhatbuf_r>
 8005454:	9f00      	ldr	r7, [sp, #0]
 8005456:	4605      	mov	r5, r0
 8005458:	4639      	mov	r1, r7
 800545a:	4630      	mov	r0, r6
 800545c:	f7ff fb16 	bl	8004a8c <_malloc_r>
 8005460:	b948      	cbnz	r0, 8005476 <__smakebuf_r+0x46>
 8005462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005466:	059a      	lsls	r2, r3, #22
 8005468:	d4ee      	bmi.n	8005448 <__smakebuf_r+0x18>
 800546a:	f023 0303 	bic.w	r3, r3, #3
 800546e:	f043 0302 	orr.w	r3, r3, #2
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	e7e2      	b.n	800543c <__smakebuf_r+0xc>
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	6020      	str	r0, [r4, #0]
 800547a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800547e:	81a3      	strh	r3, [r4, #12]
 8005480:	9b01      	ldr	r3, [sp, #4]
 8005482:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005486:	b15b      	cbz	r3, 80054a0 <__smakebuf_r+0x70>
 8005488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800548c:	4630      	mov	r0, r6
 800548e:	f000 f81d 	bl	80054cc <_isatty_r>
 8005492:	b128      	cbz	r0, 80054a0 <__smakebuf_r+0x70>
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	f023 0303 	bic.w	r3, r3, #3
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	81a3      	strh	r3, [r4, #12]
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	431d      	orrs	r5, r3
 80054a4:	81a5      	strh	r5, [r4, #12]
 80054a6:	e7cf      	b.n	8005448 <__smakebuf_r+0x18>

080054a8 <_fstat_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4d07      	ldr	r5, [pc, #28]	@ (80054c8 <_fstat_r+0x20>)
 80054ac:	2300      	movs	r3, #0
 80054ae:	4604      	mov	r4, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	4611      	mov	r1, r2
 80054b4:	602b      	str	r3, [r5, #0]
 80054b6:	f7fb fb78 	bl	8000baa <_fstat>
 80054ba:	1c43      	adds	r3, r0, #1
 80054bc:	d102      	bne.n	80054c4 <_fstat_r+0x1c>
 80054be:	682b      	ldr	r3, [r5, #0]
 80054c0:	b103      	cbz	r3, 80054c4 <_fstat_r+0x1c>
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	bd38      	pop	{r3, r4, r5, pc}
 80054c6:	bf00      	nop
 80054c8:	20000300 	.word	0x20000300

080054cc <_isatty_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d06      	ldr	r5, [pc, #24]	@ (80054e8 <_isatty_r+0x1c>)
 80054d0:	2300      	movs	r3, #0
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	f7fb fb77 	bl	8000bca <_isatty>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_isatty_r+0x1a>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_isatty_r+0x1a>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	20000300 	.word	0x20000300

080054ec <_init>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	bf00      	nop
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr

080054f8 <_fini>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr
